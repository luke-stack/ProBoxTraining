<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_StackerLiftControl" Id="{1d4af2ac-6fc6-4ae6-8e44-af88fed9850f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_StackerLiftControl
VAR_INPUT
	FunctionData			: ST_FunctionData; 						// Function data
	ZoneData				: ST_ZoneData;
	EnableDrive				: BOOL;								//forks not moving	
	OrderPos				: E_StackerLiftPositions; 		// Order position of palletmagazine	
	LiftEncoderType			: BOOL;								// TRUE: Encoder is used for positioning, False: Inductive sensors is used
	SensorInputs			: ST_StackerLiftSensorInp;			// Lift sensor inputs
	ManualInputs			: ST_StackerLiftManualInp;			// Manual control inputs
	EncoderSettings			: ST_LSPM_LiftEncPos;			// Encoder configuration
	TimeoutValueLift		: TIME; 							// Timeout value for turning	
	
END_VAR

VAR_OUTPUT
	DriveUp					: BOOL; 							// Drive run command lift up
	DriveDown				: BOOL; 							// Drive run command lift down
	DriveCS					: BOOL; 							// Drive run command lift low speed
	EnableTransport			: BOOL;								// Enable transport
	ActualPosition			: E_StackerLiftPositions;		// The position of the lift
END_VAR

VAR_IN_OUT
	ErrorData 				: ST_ErrorDataSet; // Error data
END_VAR

VAR
	eState					: E_StackerLiftStates;
	eLastState				: E_StackerLiftStates;	
	TimerTimeoutLift		: TON;		
	TimerIdle				: TON := (PT:= T#500MS);  // delay setting EnableTransport until lift motor realy stopped
END_VAR	]]></Declaration>
    <Implementation>
      <ST><![CDATA[
F_ResetError(
	Reset 	  := FALSE,
	ErrorData := ErrorData);


// Initialise variables	
DriveUp := FALSE;
DriveDown := FALSE;
EnableTransport := FALSE;	
TimerTimeoutLift.IN := FALSE;
TimerTimeoutLift.PT := TimeoutValueLift;
//ActualPosition := E_PositionsPalletMagazineForkLift.UNDEFINED;
ActualPosition 	:= _M_GetActualPosition(LiftEncoderType,SensorInputs,EncoderSettings,ErrorData);
 

CASE eState OF
	(*************************************************************************
	  Initialise
	*************************************************************************)	
	E_StackerLiftStates.INIT:
		DriveUp := FALSE;
		DriveDown := FALSE;
		DriveCS := FALSE;		
		EnableTransport := FALSE;	
	
		eLastState := eState;
		eState := E_StackerLiftStates.IDLE;
		
	(*************************************************************************
	  Error
	*************************************************************************)	
	E_StackerLiftStates.Error:

		IF NOT ManualInputs.SwitchManualAuto THEN
			eLastState := eState;
			eState := E_StackerLiftStates.MANUAL;

		// Acknowledge request error
		ELSIF ErrorData.ErrorType <> E_ErrorType.ERROR AND 
			FunctionData.ErrorData.Error.ErrorType <> E_ErrorType.ERROR AND ZoneData.ErrorData.ErrorState <> E_ErrorState.ERROR  THEN	
			eLastState := eState;
			eState := E_StackerLiftStates.Init;			
		END_IF	

	(*************************************************************************
	  Manual
	*************************************************************************)			
	E_StackerLiftStates.MANUAL:		
		IF ManualInputs.SwitchManualAuto THEN
			eLastState := eState;
			eState := E_StackerLiftStates.INIT;		
		ELSE
			_M_ManualMode(LiftEncoderType,SensorInputs,ManualInputs,EncoderSettings,ActualPosition);			
		END_IF
	(*************************************************************************
	  Idle
	*************************************************************************)		
	E_StackerLiftStates.IDLE:
		IF NOT ManualInputs.SwitchManualAuto THEN
			eLastState := eState;
			eState := E_StackerLiftStates.MANUAL;

		// If function is started and no error	
		ELSIF ((FunctionData.OperationState.eState = E_PositionState.STARTED OR FunctionData.OperationState.eState = E_PositionState.STOPPING) AND
		  	   FunctionData.ErrorData.Error.ErrorType <> E_ErrorType.ERROR AND ZoneData.ErrorData.ErrorState <> E_ErrorState.ERROR) THEN		  	
					
			DriveCS := FALSE;	
	
			IF OrderPos = E_StackerLiftPositions.DOWN THEN
				// When Lift is in position down (lowest position)
				IF ActualPosition = E_StackerLiftPositions.DOWN THEN
					EnableTransport := TimerIdle.Q;
				ELSIF(EnableDrive AND FunctionData.OperationState.eState = E_PositionState.STARTED) THEN //only start movment if group is started and not stopping
					eLastState := eState;
					eState := E_StackerLiftStates.LIFT_DOWN;
				END_IF
				
			ELSIF OrderPos = E_StackerLiftPositions.UP THEN
				// When lift is in upper position, second pallet lifted up
				IF ActualPosition = E_StackerLiftPositions.Up THEN
					EnableTransport := TimerIdle.Q;
				ELSIF(EnableDrive AND FunctionData.OperationState.eState = E_PositionState.STARTED) THEN //only start movment if group is started and not stopping
					eLastState := eState;
					eState := E_StackerLiftStates.LIFT_UP;
				END_IF
				
			ELSIF OrderPos = E_StackerLiftPositions.MIDDLE THEN
				// When lift is ordered to the middle position 
				IF ActualPosition = E_StackerLiftPositions.MIDDLE THEN
					EnableTransport := TimerIdle.Q;
				ELSIF(EnableDrive AND FunctionData.OperationState.eState = E_PositionState.STARTED) THEN //only start movment if group is started and not stopping
					IF( _M_DecideNextMovement(OrderPos,LiftEncoderType,SensorInputs,EncoderSettings) = E_StackerLiftStates.LIFT_MIDDLE_FROM_DOWN) THEN
						eLastState := eState;
						eState := E_StackerLiftStates.LIFT_MIDDLE_FROM_DOWN;
					ELSIF( _M_DecideNextMovement(OrderPos,LiftEncoderType,SensorInputs,EncoderSettings) = E_StackerLiftStates.LIFT_MIDDLE_FROM_UP) THEN
						eLastState := eState;
						eState := E_StackerLiftStates.LIFT_MIDDLE_FROM_UP;
					ELSE
						//can not decide next movment, since we dont know where we are
						F_SetError( ErrorType := E_ErrorType.ERROR, 
									ErrorParam := 'Middle position unknown.', //Can not decide next movment 
									ErrorMsg := E_ErrorConv.INCORRECT_SENSOR_SIGNAL, 
									ErrorData := ErrorData);
						
					END_IF
				END_IF			
			END_IF
		ELSE
			eLastState := eState;
			eState := E_StackerLiftStates.Error;		  
		END_IF	
	
	(*************************************************************************
	  Turn to ccw
	*************************************************************************)	
	E_StackerLiftStates.LIFT_DOWN:
		// If function is started or stopping and no error
		IF (FunctionData.OperationState.eState = E_PositionState.STARTED OR FunctionData.OperationState.eState = E_PositionState.STOPPING) AND
		  FunctionData.ErrorData.Error.ErrorType <> E_ErrorType.ERROR AND ZoneData.ErrorData.ErrorState <> E_ErrorState.ERROR THEN
			// Moving lift down until desired level is reached			
			TimerTimeoutLift.IN := TRUE;
			// If time is up
			IF TimerTimeoutLift.Q THEN
				DriveDown := FALSE;
				F_SetError(
					ErrorType := E_ErrorType.ERROR, 
					ErrorParam := 'Timeout Lifting Down', 
					ErrorMsg := E_ErrorConv.TIMEOUT_MOVEMENT, 
					ErrorData := ErrorData);
					
				eLastState := eState;
				eState := E_StackerLiftStates.Error;
			ELSIF(_M_DecideStopAndCreep(eState,LiftEncoderType,SensorInputs,EncoderSettings, ActualPosition,ErrorData,DriveCS)) THEN
				eLastState := eState;
				eState := E_StackerLiftStates.IDLE;			
			ELSIF EnableDrive THEN
				DriveDown := TRUE;
				//DriveCS := _M_DecideCreepSpeed(eState,LiftType,SensorInputs,EncoderSettings);		
			END_IF
		ELSE
			eLastState := eState;
			eState := E_StackerLiftStates.Error;			
		END_IF
		
	
	(*************************************************************************
	  Turn to cw
	*************************************************************************)		
	E_StackerLiftStates.LIFT_UP:
	
		IF (FunctionData.OperationState.eState = E_PositionState.STARTED OR FunctionData.OperationState.eState = E_PositionState.STOPPING) AND
		  FunctionData.ErrorData.Error.ErrorType <> E_ErrorType.ERROR AND ZoneData.ErrorData.ErrorState <> E_ErrorState.ERROR THEN
			// Moving lift up until desired level is reached
			TimerTimeoutLift.IN := TRUE;
				
			// If time is up
			IF TimerTimeoutLift.Q THEN
				DriveUp := FALSE;
				F_SetError(
					ErrorType := E_ErrorType.ERROR, 
					ErrorParam := 'Timeout Lifting Up', 
					ErrorMsg := E_ErrorConv.TIMEOUT_MOVEMENT, 
					ErrorData := ErrorData);
					
				eLastState := eState;
				eState := E_StackerLiftStates.Error;
			ELSIF(_M_DecideStopAndCreep(eState,LiftEncoderType,SensorInputs,EncoderSettings, ActualPosition,ErrorData,DriveCS)) THEN
				eLastState := eState;
				eState := E_StackerLiftStates.IDLE;
			ELSIF EnableDrive THEN
				DriveUp := TRUE;
				//DriveCS := _M_DecideCreepSpeed(eState,LiftType,SensorInputs,EncoderSettings);		
			END_IF		
		ELSE
			eLastState := eState;
			eState := E_StackerLiftStates.Error;			
		END_IF

	(*************************************************************************
	  Turn to middle from ccw
	*************************************************************************)
	E_StackerLiftStates.LIFT_MIDDLE_FROM_DOWN:
	
		IF (FunctionData.OperationState.eState = E_PositionState.STARTED OR FunctionData.OperationState.eState = E_PositionState.STOPPING) AND
		  FunctionData.ErrorData.Error.ErrorType <> E_ErrorType.ERROR AND ZoneData.ErrorData.ErrorState <> E_ErrorState.ERROR THEN			
			// Moving lift up to the middle poistition until desired level is reached
			TimerTimeoutLift.IN := TRUE;				
			// If time is up
			IF TimerTimeoutLift.Q THEN
				DriveUp := FALSE;
				F_SetError(
					ErrorType := E_ErrorType.ERROR, 
					ErrorParam := 'Timeout Lifting to Middle from Down', 
					ErrorMsg := E_ErrorConv.TIMEOUT_MOVEMENT, 
					ErrorData := ErrorData);
					
				eLastState := eState;
				eState := E_StackerLiftStates.Error;
			ELSIF(_M_DecideStopAndCreep(eState,LiftEncoderType,SensorInputs,EncoderSettings, ActualPosition,ErrorData,DriveCS)) THEN
				eLastState := eState;
				eState := E_StackerLiftStates.IDLE;
			ELSIF EnableDrive THEN
				DriveUp := TRUE;
				//DriveCS := _M_DecideCreepSpeed(eState,LiftType,SensorInputs,EncoderSettings);	
			END_IF

		ELSE
			eLastState := eState;
			eState := E_StackerLiftStates.Error;
		END_IF
		
	(*************************************************************************
	  Turn to middle from cw
	*************************************************************************)		
	E_StackerLiftStates.LIFT_MIDDLE_FROM_UP:
	
		IF (FunctionData.OperationState.eState = E_PositionState.STARTED OR FunctionData.OperationState.eState = E_PositionState.STOPPING) AND
		  FunctionData.ErrorData.Error.ErrorType <> E_ErrorType.ERROR AND ZoneData.ErrorData.ErrorState <> E_ErrorState.ERROR THEN			
			// Moving lift down to the middle poistition until desired level is reached
			TimerTimeoutLift.IN := TRUE;
			// If time is up
			IF TimerTimeoutLift.Q THEN
				DriveDown := FALSE;
				F_SetError(
					ErrorType := E_ErrorType.ERROR, 
					ErrorParam := 'Timeout Liftning to Middle from Up', 
					ErrorMsg := E_ErrorConv.TIMEOUT_MOVEMENT, 
					ErrorData := ErrorData);
					
				eLastState := eState;
				eState := E_StackerLiftStates.Error;
				
			ELSIF(_M_DecideStopAndCreep(eState,LiftEncoderType,SensorInputs,EncoderSettings, ActualPosition,ErrorData,DriveCS)) THEN
				eLastState := eState;
				eState := E_StackerLiftStates.IDLE;
			ELSIF EnableDrive THEN
				DriveDown := TRUE;
				//DriveCS := _M_DecideCreepSpeed(eState,LiftType,SensorInputs,EncoderSettings);	
			END_IF		
		ELSE
			eLastState := eState;
			eState := E_StackerLiftStates.Error;			
		END_IF
END_CASE

TimerTimeoutLift();
TimerIdle(IN := eState=E_StackerLiftStates.IDLE);
]]></ST>
    </Implementation>
    <Method Name="_M_DecideNextMovement" Id="{bb57207d-9cf4-486e-bc98-49471b29e42f}">
      <Declaration><![CDATA[//When order pos is Middle, we need to determine if going to middle from above or from below
METHOD PRIVATE _M_DecideNextMovement : E_StackerLiftStates
VAR_INPUT
	OrderPos 				: E_StackerLiftPositions;
	LiftEncoderType			: BOOL;							// TRUE: Encoder is used for positioning, False: Inductive sensors is used
	SensorInputs			: ST_StackerLiftSensorInp;	
	EncoderSettings			: ST_LSPM_LiftEncPos;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF( OrderPos <> E_StackerLiftPositions.MIDDLE) THEN
	_M_DecideNextMovement := E_StackerLiftStates.IDLE;
	RETURN;
END_IF


IF(NOT LiftEncoderType) THEN

	IF(SensorInputs.SensorPosDown OR (SensorInputs.SensorPosMiddleDown AND NOT SensorInputs.SensorPosMiddleUp)) THEN
		_M_DecideNextMovement := E_StackerLiftStates.LIFT_MIDDLE_FROM_DOWN;
	
	ELSIF(SensorInputs.SensorPosUp OR (SensorInputs.SensorPosMiddleUp AND NOT SensorInputs.SensorPosMiddleDown)) THEN
		_M_DecideNextMovement :=E_StackerLiftStates.LIFT_MIDDLE_FROM_UP;
	END_IF		
END_IF
		

IF(LiftEncoderType) THEN
	
	IF( SensorInputs.EncoderValue <= EncoderSettings.Middle) THEN		   
		_M_DecideNextMovement := E_StackerLiftStates.LIFT_MIDDLE_FROM_DOWN;
		
	ELSIF( SensorInputs.EncoderValue >= EncoderSettings.Middle) THEN		   
		_M_DecideNextMovement := E_StackerLiftStates.LIFT_MIDDLE_FROM_UP;	
	END_IF
	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_DecideStopAndCreep" Id="{77945a4b-e6b2-42dc-8f92-cc2d413640d9}">
      <Declaration><![CDATA[//Check if the desired position is reached. 
//Check if creep speed conditions is met.
METHOD PRIVATE _M_DecideStopAndCreep : BOOL
VAR_INPUT
	State					: E_StackerLiftStates;
	LiftEncoderType			: BOOL;							// TRUE: Encoder is used for positioning, False: Inductive sensors is used
	SensorInputs			: ST_StackerLiftSensorInp;	
	EncoderSettings			: ST_LSPM_LiftEncPos;
	ActualPosition			: E_StackerLiftPositions;
END_VAR
VAR_IN_OUT	
	ErrorData 				: ST_ErrorDataSet; // Error data
	Creep					: BOOL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//stop conditions are not the same as to determine the actual position

//Inductive sensor lift type
IF(NOT LiftEncoderType) THEN
	IF(State = E_StackerLiftStates.LIFT_DOWN) THEN
		_M_DecideStopAndCreep := SensorInputs.SensorPosDown;		
		Creep := SensorInputs.SensorPosDownCS OR SensorInputs.SensorPosDown;
		//Check that the lower lift position is equal to the definition of lift DOWN
		IF(_M_DecideStopAndCreep AND (ActualPosition <> E_StackerLiftPositions.DOWN)) THEN
			F_SetError(
						ErrorType := E_ErrorType.ERROR, 
						ErrorParam := 'Lift Lower position both sensors not detected', 
						ErrorMsg := E_ErrorConv.INCORRECT_SENSOR_SIGNAL, 
						ErrorData := ErrorData);
		END_IF
		
	END_IF
	
	IF(State = E_StackerLiftStates.LIFT_UP) THEN
		_M_DecideStopAndCreep := ActualPosition = E_StackerLiftPositions.UP;
		Creep := FALSE; //there is no creep speed sensor moving up		
	END_IF
	
	IF(State = E_StackerLiftStates.LIFT_MIDDLE_FROM_DOWN) THEN
		_M_DecideStopAndCreep := SensorInputs.SensorPosMiddleUp; //stop when middle up sensor is detected.
		Creep := SensorInputs.SensorPosMiddleDown;	 	
	
		IF(_M_DecideStopAndCreep AND (ActualPosition <> E_StackerLiftPositions.MIDDLE)) THEN
			F_SetError(
						ErrorType := E_ErrorType.ERROR, 
						ErrorParam := 'Lift middle position both sensors not detected', 
						ErrorMsg := E_ErrorConv.INCORRECT_SENSOR_SIGNAL, 
						ErrorData := ErrorData);
		END_IF
	END_IF
	
	IF(State = E_StackerLiftStates.LIFT_MIDDLE_FROM_UP) THEN
		_M_DecideStopAndCreep := SensorInputs.SensorPosMiddleDown;
		Creep := SensorInputs.SensorPosMiddleUp;
		IF(_M_DecideStopAndCreep AND (ActualPosition <> E_StackerLiftPositions.MIDDLE)) THEN
			F_SetError(
						ErrorType := E_ErrorType.ERROR, 
						ErrorParam := 'Both middle position sensors not detected', 
						ErrorMsg := E_ErrorConv.INCORRECT_SENSOR_SIGNAL, 
						ErrorData := ErrorData);
		END_IF	
	END_IF
	
END_IF


//Encoder lift type
IF(LiftEncoderType) THEN
	IF(State = E_StackerLiftStates.LIFT_DOWN) THEN
		_M_DecideStopAndCreep := (SensorInputs.EncoderValue <= EncoderSettings.Lower + EncoderSettings.Tolerance);
		Creep := Creep OR SensorInputs.EncoderValue <= EncoderSettings.Lower + EncoderSettings.CsWindow AND
				 		  SensorInputs.EncoderValue >= EncoderSettings.Lower - EncoderSettings.CsWindow;
		
		IF(_M_DecideStopAndCreep AND (ActualPosition <> E_StackerLiftPositions.DOWN)) THEN
			F_SetError(
						ErrorType := E_ErrorType.ERROR, 
						ErrorParam := 'Lift Lower positioning error', 
						ErrorMsg := E_ErrorConv.INCORRECT_SENSOR_SIGNAL, 
						ErrorData := ErrorData);
		END_IF
		
	END_IF
	
	IF(State = E_StackerLiftStates.LIFT_UP) THEN
		_M_DecideStopAndCreep := (SensorInputs.EncoderValue >= EncoderSettings.Upper - EncoderSettings.Tolerance);
		Creep := FALSE; //there is no creep speed window used moving up		
	END_IF
	
	IF(State = E_StackerLiftStates.LIFT_MIDDLE_FROM_DOWN) THEN
		_M_DecideStopAndCreep := (SensorInputs.EncoderValue >= EncoderSettings.Middle - EncoderSettings.Tolerance);
		Creep :=  Creep OR SensorInputs.EncoderValue >= EncoderSettings.Middle - EncoderSettings.CsWindow AND
				 		   SensorInputs.EncoderValue <= EncoderSettings.Middle + EncoderSettings.CsWindow;	
		IF(_M_DecideStopAndCreep AND (ActualPosition <> E_StackerLiftPositions.MIDDLE)) THEN
			F_SetError(
						ErrorType := E_ErrorType.ERROR, 
						ErrorParam := 'Lift middle position could not be determined', 
						ErrorMsg := E_ErrorConv.INCORRECT_SENSOR_SIGNAL, 
						ErrorData := ErrorData);
		END_IF
	END_IF
	
	IF(State = E_StackerLiftStates.LIFT_MIDDLE_FROM_UP) THEN
		_M_DecideStopAndCreep := (SensorInputs.EncoderValue <= EncoderSettings.Middle + EncoderSettings.Tolerance);
		Creep := Creep OR SensorInputs.EncoderValue <= EncoderSettings.Middle + EncoderSettings.CsWindow AND
				 		  SensorInputs.EncoderValue >= EncoderSettings.Middle - EncoderSettings.CsWindow;
		IF(_M_DecideStopAndCreep AND (ActualPosition <> E_StackerLiftPositions.MIDDLE)) THEN
			F_SetError(
						ErrorType := E_ErrorType.ERROR, 
						ErrorParam := 'Lift middle position could not be determined', 
						ErrorMsg := E_ErrorConv.INCORRECT_SENSOR_SIGNAL, 
						ErrorData := ErrorData);
		END_IF	
	END_IF

END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_GetActualPosition" Id="{4a678a2e-0ef6-48a6-9cf7-5b0734a1977b}">
      <Declaration><![CDATA[METHOD PRIVATE _M_GetActualPosition : E_StackerLiftPositions
VAR_INPUT	
	LiftEncoderType			: BOOL;							// TRUE: Encoder is used for positioning, False: Inductive sensors is used
	SensorInputs			: ST_StackerLiftSensorInp;	
	EncoderSettings			: ST_LSPM_LiftEncPos;
END_VAR
VAR_IN_OUT
	ErrorData 				: ST_ErrorDataSet; // Error data
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
_M_GetActualPosition := E_StackerLiftPositions.UNDEFINED;


//Inductive senor lift type
IF(NOT LiftEncoderType) THEN
	
	IF(SensorInputs.SensorPosDown AND SensorInputs.SensorPosDownCS) THEN
		_M_GetActualPosition := E_StackerLiftPositions.DOWN;
	ELSIF(SensorInputs.SensorPosUp) THEN
		_M_GetActualPosition := E_StackerLiftPositions.UP;		
	ELSIF(SensorInputs.SensorPosMiddleDown AND SensorInputs.SensorPosMiddleUp) THEN
		_M_GetActualPosition := E_StackerLiftPositions.MIDDLE;	
	END_IF
	
	
	// Sensor error check
	IF (SensorInputs.SensorPosDown AND SensorInputs.SensorPosUp) OR 
		(SensorInputs.SensorPosDown AND (SensorInputs.SensorPosMiddleDown AND SensorInputs.SensorPosMiddleUp)) OR 
		(SensorInputs.SensorPosUp AND (SensorInputs.SensorPosMiddleDown AND SensorInputs.SensorPosMiddleUp)) THEN			
			F_SetError(
				ErrorType := E_ErrorType.ERROR, 
				ErrorParam := 'Two position sensors active', 
				ErrorMsg := E_ErrorConv.INCORRECT_SENSOR_SIGNAL, 
				ErrorData := ErrorData);
	END_IF
	
END_IF




//Encoder lift type
IF(LiftEncoderType) THEN
	
	IF( (SensorInputs.EncoderValue <= EncoderSettings.Lower + EncoderSettings.Tolerance) AND
		(SensorInputs.EncoderValue >= EncoderSettings.Lower - EncoderSettings.Tolerance)) THEN
		_M_GetActualPosition := E_StackerLiftPositions.DOWN;
	
	ELSIF( (SensorInputs.EncoderValue <= EncoderSettings.Middle + EncoderSettings.Tolerance) AND
		   (SensorInputs.EncoderValue >= EncoderSettings.Middle - EncoderSettings.Tolerance)) THEN
		_M_GetActualPosition := E_StackerLiftPositions.MIDDLE;
		
	ELSIF( (SensorInputs.EncoderValue >= EncoderSettings.Upper - EncoderSettings.Tolerance) (*AND
		   (SensorInputs.EncoderValue <= EncoderSettings.Upper + EncoderSettings.PositioningTolerance)*)) THEN
		_M_GetActualPosition := E_StackerLiftPositions.UP;	
	END_IF
	
	
	IF( (SensorInputs.EncoderValue < EncoderSettings.LowerEndLimit) OR
		(SensorInputs.EncoderValue > EncoderSettings.UpperEndLimit)) THEN
	
		F_SetError(
				ErrorType := E_ErrorType.ERROR, 
				ErrorParam := 'Position outside valid range', 
				ErrorMsg := E_ErrorConv.INCORRECT_SENSOR_SIGNAL, 
				ErrorData := ErrorData);
	END_IF	
END_IF



]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_ManualMode" Id="{d45e0872-89dd-40aa-ae10-99c188f53580}">
      <Declaration><![CDATA[METHOD PRIVATE _M_ManualMode : BOOL
VAR_INPUT	
	LiftEncoderType			: BOOL;							// TRUE: Encoder is used for positioning, False: Inductive sensors is used
	SensorInputs			: ST_StackerLiftSensorInp;		// Lift sensor inputs
	ManualInputs			: ST_StackerLiftManualInp;		// Manual control inputs
	EncoderSettings			: ST_LSPM_LiftEncPos;		// Encoder configuration
	ActualPos				: E_StackerLiftPositions;	// Actual lift position
END_VAR
VAR_INST
	PositiveEdgeMan		: R_TRIG;
	ManualInPos				: BOOL;
END_VAR
VAR
		
	TempErrorData 			: ST_ErrorDataSet; // Temporary error data
	Creep					: BOOL;
	i						: E_StackerLiftStates;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// If down,middle or up positioin is reached, then the user must re-push the button in order to move lift up or down


PositiveEdgeMan(CLK := ActualPos=E_StackerLiftPositions.DOWN OR
					   ActualPos=E_StackerLiftPositions.MIDDLE OR
					   ActualPos=E_StackerLiftPositions.UP);
					   
   
IF PositiveEdgeMan.Q THEN 
	ManualInPos := TRUE;
ELSIF NOT ManualInputs.SwitchDriveUp AND NOT ManualInputs.SwitchDriveDown THEN 
	ManualInPos := FALSE;				
END_IF

DriveUp 	:= ManualInputs.SwitchDriveUp 	AND NOT ManualInPos;
DriveDown 	:= ManualInputs.SwitchDriveDown	AND NOT ManualInPos;
DriveCS		:= FALSE;

//set creep speed, check all possible modes

IF(ManualInputs.SwitchDriveDown) THEN
	_M_DecideStopAndCreep(
		State				:= E_StackerLiftStates.LIFT_DOWN, 
		LiftEncoderType		:= LiftEncoderType, 
		SensorInputs		:= SensorInputs, 
		EncoderSettings		:= EncoderSettings, 
		ActualPosition		:= ActualPos, 
		ErrorData			:= TempErrorData, 
		Creep				:= Creep);		
	DriveCS := DriveCS OR Creep;
	
	_M_DecideStopAndCreep(
		State				:= E_StackerLiftStates.LIFT_MIDDLE_FROM_UP, 
		LiftEncoderType		:= LiftEncoderType, 
		SensorInputs		:= SensorInputs, 
		EncoderSettings		:= EncoderSettings, 
		ActualPosition		:= ActualPos, 
		ErrorData			:= TempErrorData, 
		Creep				:= Creep);
		
	DriveCS := DriveCS OR Creep;
END_IF

IF(ManualInputs.SwitchDriveUp) THEN
	_M_DecideStopAndCreep(
		State				:= E_StackerLiftStates.LIFT_UP, 
		LiftEncoderType		:= LiftEncoderType, 
		SensorInputs		:= SensorInputs, 
		EncoderSettings		:= EncoderSettings, 
		ActualPosition		:= ActualPos, 
		ErrorData			:= TempErrorData, 
		Creep				:= Creep);		
	DriveCS := DriveCS OR Creep;
	
	_M_DecideStopAndCreep(
		State				:= E_StackerLiftStates.LIFT_MIDDLE_FROM_DOWN, 
		LiftEncoderType		:= LiftEncoderType, 
		SensorInputs		:= SensorInputs, 
		EncoderSettings		:= EncoderSettings, 
		ActualPosition		:= ActualPos, 
		ErrorData			:= TempErrorData, 
		Creep				:= Creep);
		
	DriveCS := DriveCS OR Creep;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_StackerLiftControl">
      <LineId Id="1602" Count="52" />
      <LineId Id="1861" Count="0" />
      <LineId Id="1657" Count="20" />
      <LineId Id="1679" Count="8" />
      <LineId Id="1689" Count="8" />
      <LineId Id="1699" Count="0" />
      <LineId Id="1701" Count="1" />
      <LineId Id="1704" Count="0" />
      <LineId Id="1706" Count="1" />
      <LineId Id="1711" Count="0" />
      <LineId Id="1713" Count="147" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StackerLiftControl._M_DecideNextMovement">
      <LineId Id="20" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="35" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="38" Count="2" />
      <LineId Id="44" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="51" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="37" Count="0" />
    </LineIds>
    <LineIds Name="FB_StackerLiftControl._M_DecideStopAndCreep">
      <LineId Id="140" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="7" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="147" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="143" Count="3" />
      <LineId Id="141" Count="1" />
      <LineId Id="137" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="148" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="83" Count="3" />
      <LineId Id="82" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="151" Count="1" />
      <LineId Id="93" Count="6" />
      <LineId Id="45" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="22" Count="2" />
      <LineId Id="134" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="155" Count="5" />
      <LineId Id="154" Count="0" />
      <LineId Id="161" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="163" Count="5" />
      <LineId Id="162" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="170" Count="5" />
      <LineId Id="169" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="FB_StackerLiftControl._M_GetActualPosition">
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="23" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="51" Count="1" />
      <LineId Id="54" Count="3" />
      <LineId Id="61" Count="4" />
      <LineId Id="53" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="70" Count="2" />
      <LineId Id="26" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="73" Count="1" />
      <LineId Id="83" Count="1" />
      <LineId Id="77" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="81" Count="1" />
      <LineId Id="78" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="67" Count="2" />
      <LineId Id="66" Count="0" />
    </LineIds>
    <LineIds Name="FB_StackerLiftControl._M_ManualMode">
      <LineId Id="22" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="24" Count="3" />
      <LineId Id="29" Count="2" />
      <LineId Id="33" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="89" Count="7" />
      <LineId Id="87" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="99" Count="8" />
      <LineId Id="98" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="109" Count="20" />
      <LineId Id="64" Count="0" />
      <LineId Id="58" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
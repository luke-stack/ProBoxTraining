<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_PB_Element_Encoder" Id="{21323363-2be5-4928-be34-24910741ee0a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PB_Element_Encoder
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2018-04-23 08:21:38 +0200 (Mo., 23 Apr 2018) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/30_Toolbox/99_Misc/FB_Encoder.TcPOU $
 *
 *	Purpose			:	Simple encoder
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
VAR_INPUT
	Run 		: BOOL; // Run command
	Speed 		: REAL; // Speed [mm/s]
	Resolution 	: INT := 1; // Encoder Resolution [Inc/mm]
END_VAR
VAR_OUTPUT
	EncoderValue : WORD; // Encoder value [Inc]
END_VAR
VAR
	Inc 		: LREAL;
	LastSpeed   : REAL;
	t			: REAL;
	a			: REAL;
	StartCycl	: BOOL;
	fbGetCurTaskIdx  	: GETCURTASKINDEX;
	CycleTime       	: UDINT;
	EncoderValue_LR		: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Get current cycle time
fbGetCurTaskIdx();
CycleTime := _TaskInfo[fbGetCurTaskIdx.index].CycleTime;

// Use the absolute speed value, this to avoid backwards counting.
Speed := ABS(Speed);

// Calculate increment based on speed and resolution
IF Run THEN
	// t [s]
	t := (UDINT_TO_REAL(CycleTime) / 10000000);

	// Wait start cycle 
	IF StartCycl THEN
		// a = v - v0 / t [mm/s^2]
		a := (Speed - LastSpeed) / t;	
	
		// Incs s = v0 * t + 1/2 * a * t^2 [mm/s]
		Inc := (LastSpeed * Resolution * t + 1/2 * a * EXPT(t,2));

		// Update last speed	
		LastSpeed := Speed;
	END_IF

	// Set start cycle done
	StartCycl := TRUE;
ELSE
	// Reset values
	StartCycl := FALSE;
	LastSpeed := 0;
	Inc := 0;
END_IF

// Update encoder value LREAL value
EncoderValue_LR := EncoderValue_LR + Inc;
//set output with conversation from LREAL to WORD
EncoderValue := LREAL_TO_WORD(EncoderValue_LR);
			
]]></ST>
    </Implementation>
    <ObjectProperties>
      <XmlArchive>
        <Data>
          <o xml:space="preserve" t="UMLStereoTypeContainerObject">
            <v n="IsType" t="UMLType">BaseArea</v>
            <v n="Stereotype">""</v>
            <d n="Stereotypes" t="Hashtable" />
          </o>
        </Data>
        <TypeList>
          <Type n="Hashtable">System.Collections.Hashtable</Type>
          <Type n="String">System.String</Type>
          <Type n="UMLStereoTypeContainerObject">{30250973-b110-4e31-b562-c102e042dca4}</Type>
          <Type n="UMLType">{0197b136-405a-42ee-bb27-fd08b621d0cf}</Type>
        </TypeList>
      </XmlArchive>
    </ObjectProperties>
    <LineIds Name="FB_PB_Element_Encoder">
      <LineId Id="3" Count="37" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_ProBoxElementShuttleEmulation" Id="{d0c2f123-74be-462b-a00f-7a74458fb34e}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ProBoxElementShuttleEmulation EXTENDS FB_ElementConvEmulation
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision:  $
 *	Revision date	:	$Date: $
 *	Last changed by	:	$Author: $
 *	URL				:	$URL: $
 *
 *	Purpose			:	Shuttle Emulation element.
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *
 **************************************************************************************)
 VAR_INPUT
 	Config							: ST_CFG_TiltPositionEmu; // emulation config	
END_VAR
VAR
	pElement						: POINTER TO FB_ProBoxElementShuttle; // Address to element
	rElement						: REFERENCE TO FB_ProBoxElementShuttle; // Reference to element
	j : INT;	
	DbgHwInputElShuttle 			: ST_HW_InputsProBoxElementShuttle;//ST_HW_InputsShuttle;	
	fb_TiltControlEmu				: ARRAY [gvl_mpd.CV_A..gvl_mpd.CV_B] OF FB_TiltControlEmulation;
	Debug:BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(**************************************************************************************************************
   Initialization
***************************************************************************************************************)
A_Init();

(**************************************************************************************************************
   Update reference
***************************************************************************************************************)
A_UpdateReference();

(**************************************************************************************************************
   Emulation
***************************************************************************************************************)
// If emulation element is initialized
IF ElementData.Init THEN
	
	// Update real data
	M_UpdateRealObjectData();	

	//Set emulation speed	
	rElement.P_EmuSpeed	:= ProBoxSystem.EMULATION_SPEED;
	
	//
	FOR j := 1 TO GVL_MPD.CV_B DO 
		fb_TiltControlEmu[j](
			Config:= Config, 
			DriveRun_Up:= rElement.HW_Outputs.DriveCV[j].TiltUp, 
			DriveRun_Down:= rElement.HW_Outputs.DriveCV[j].TiltDown, 
			Lift_Pos_Up=> rElement.HW_Inputs.Conv[j].TiltUp, 
			Lift_Pos_Down=> rElement.HW_Inputs.Conv[j].TiltDown, 
			Lift_Pos_Middle=> rElement.HW_Inputs.Conv[j].TiltMiddle);
	END_FOR
	
	// Overwrite inputs
	_M_OverWriteInputs();

END_IF]]></ST>
    </Implementation>
    <Method Name="_M_OverWriteInputs" Id="{1294c8bc-cbdc-4171-bf8b-94c4b5f44902}">
      <Declaration><![CDATA[METHOD PRIVATE _M_OverWriteInputs : BOOL
VAR_INPUT
END_VAR
VAR
	i : INT;
	FunctionNoConvA 				: E_FunctionNumber;
	FunctionNoConvB 				: E_FunctionNumber;	
	NumberOfZonesConvA				: INT:=1;
	NumberOfZonesConvB				: INT:=1;
	
	DriveA_Run_12					: BOOL;	//Conveyor A FWD
	DriveA_Run_21					: BOOL; //Conveyor A RWD
	DriveB_Run_12					: BOOL; //Conveyor B FWD
	DriveB_Run_21					: BOOL; //Conveyor B RWD
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Get the function number of the shuttle car conveyor A and B
//Get the function number of the vertical lift conveyor A and B
IF(__ISVALIDREF(ElementRegistry[rElement.ConfigElement.eElementNumber].rElementData)) THEN
	FunctionNoConvA:= ElementRegistry[rElement.ConfigElement.eElementNumber].rElementData.MemberList.FunctionList[1].eFunctionNumber;
	FunctionNoConvB:= ElementRegistry[rElement.ConfigElement.eElementNumber].rElementData.MemberList.FunctionList[2].eFunctionNumber;
ELSE
	RETURN; //error
END_IF

IF(__ISVALIDREF(FunctionRegistry[FunctionNoConvA].rSettingsFunction)) THEN
	NumberOfZonesConvA := FunctionRegistry[FunctionNoConvA].rSettingsFunction.NumberOfZones;
END_IF
IF(__ISVALIDREF(FunctionRegistry[FunctionNoConvB].rSettingsFunction)) THEN
	NumberOfZonesConvB := FunctionRegistry[FunctionNoConvB].rSettingsFunction.NumberOfZones;
END_IF



IF(ElementData.Init AND NOT Debug) THEN
	

	//set temp variables
	DriveA_Run_12 := ElementRegistry[rElement.ConfigElement.eElementNumber].rElementData.FunctionOrder.ReqDriveRun AND ElementRegistry[rElement.ConfigElement.eElementNumber].rElementData.FunctionOrder.ReqDriveDirection;
	DriveA_Run_21 := ElementRegistry[rElement.ConfigElement.eElementNumber].rElementData.FunctionOrder.ReqDriveRun AND NOT ElementRegistry[rElement.ConfigElement.eElementNumber].rElementData.FunctionOrder.ReqDriveDirection;
	DriveB_Run_12:= ElementRegistry[rElement.ConfigElement.eElementNumber].rElementData.FunctionOrder.ReqDriveRun_34 AND ElementRegistry[rElement.ConfigElement.eElementNumber].rElementData.FunctionOrder.ReqDriveDirection_34;
	DriveB_Run_21:= ElementRegistry[rElement.ConfigElement.eElementNumber].rElementData.FunctionOrder.ReqDriveRun_34 AND NOT ElementRegistry[rElement.ConfigElement.eElementNumber].rElementData.FunctionOrder.ReqDriveDirection_34;

	
	//Set overhang sensor value on shuttle car. simulate overhang sensor being blocked during transfer
	F_MPD_GetOverhangSensorStatus(
			MPD_Function:= FunctionNoConvB,  // Conveyor B
			ZonesPerFunction:= NumberOfZonesConvB,
			Drive_Run_12:= DriveB_Run_12, //rElement.HW_Outputs.DriveCV_B.Drive_Run_12,
			Drive_Run_21:= DriveB_Run_21, //rElement.HW_Outputs.DriveCV_B.Drive_Run_21,
			SensorOverhang12=>rElement.HW_Inputs.Conv[2].SensorOverhangLeft,
			SensorOverhang21=>rElement.HW_Inputs.Conv[2].SensorOverhangRight);	
	
	F_MPD_GetOverhangSensorStatus(
			MPD_Function:= FunctionNoConvA,  // Conveyor A
			ZonesPerFunction:= NumberOfZonesConvA,
			Drive_Run_12:= DriveA_Run_12, //rElement.HW_Outputs.DriveCV_A.Drive_Run_12,
			Drive_Run_21:= DriveA_Run_21,//rElement.HW_Outputs.DriveCV_A.Drive_Run_21,
			SensorOverhang12=>rElement.HW_Inputs.Conv[1].SensorOverhangLeft,
			SensorOverhang21=>rElement.HW_Inputs.Conv[1].SensorOverhangRight);
	
	
	

	//Set overhang sensor value on adjacent functions
	//simulate Sensor overhang is activated during transfer
	FOR i := 1 TO GVL_MPD.MAXPDs BY 1 DO	
		IF  rElement.Config.ConvCFG[i].eFunctionNumber <> E_FunctionNumber.F_BEGIN_FUNCTION THEN
			rElement.M_SetOverhangSensor(
				eFunctionnumber:= rElement.Config.ConvCFG[i].eFunctionNumber,			
				SensorValue:= NOT (F_PB_GetTransportControlDataRef(rElement.Config.ConvCFG[i].eFunctionNumber,1).DriveRunning AND 
								  (DriveA_Run_12 OR DriveA_Run_21 OR DriveB_Run_12 OR DriveB_Run_21)));
						
		ELSE
			EXIT;
		END_IF
	END_FOR
	
	//Set other element HW input
	rElement.HW_Inputs.MotorUnitOK 	:= DbgHwInputElShuttle.MotorUnitOK;
	rElement.HW_Inputs.EndLimit		:= DbgHwInputElShuttle.EndLimit;	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Action Name="A_Init" Id="{b466e2c7-6e58-4285-b7cc-fca62afffb1e}">
      <Implementation>
        <ST><![CDATA[(**************************************************************************************
 * 	NAME		A_Init
 * 	FUNCTION	Initialize emulated dummy element
 **************************************************************************************)

// If element is not initialized
IF NOT ElementData.Init THEN

	// Check that linked element number is valid
	IF eElementNumber > E_ElementNumber.E_BEGIN_ELEMENT AND
	   eElementNumber < E_ElementNumber.E_END_ELEMENT THEN
		
			// Check that the real module is initialized
			IF F_IsElementInitialized(eElementNumber) THEN
				// Module is initialized
				ElementData.Init := TRUE;
				
				// Send debug message
				DebugMsg := CONCAT('Initialization done. Element: ', ElementRegistry[eElementNumber].ElementName);
				fbDebugMsg.M_SendInfoMsg(DebugMsg);
				
				// Initialize real module
				F_InitializeElement(eElementNumber := eElementNumber);
			END_IF
	END_IF
END_IF

]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_UpdateReference" Id="{df53ad6e-8f98-4e9f-af01-856456007a66}">
      <Implementation>
        <ST><![CDATA[(**************************************************************************************
 * 	NAME		A_UpdateReference
 * 	FUNCTION	Update reference to real object
 **************************************************************************************)

// Check valid element number
IF eElementNumber > E_ElementNumber.E_BEGIN_ELEMENT AND
   eElementNumber < E_ElementNumber.E_END_ELEMENT THEN

	// Is reference valid  
	IF __ISVALIDREF(ElementRegistry[eElementNumber].rElement) THEN
		// Build address to reference
		pElement := ADR(ElementRegistry[eElementNumber].rElement);

		// If address is possible
		IF pElement <> 0 THEN
			// Build reference to memory
			rElement REF= pElement^;
		ELSE
			// Reinitialize module
			ElementData.Init := FALSE;
		END_IF
	ELSE
		// Reinitialize module
		ElementData.Init := FALSE;
	END_IF
END_IF
		]]></ST>
      </Implementation>
    </Action>
    <Method Name="FB_init" Id="{0f66bbd3-2cd1-4b73-b856-5b0f4445494c}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
VAR
	i:INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(bInitRetains OR bInCopyCode) THEN

	DbgHwInputElShuttle.MotorUnitOK :=  TRUE;	
	DbgHwInputElShuttle.EndLimit := TRUE;	
		
END_IF]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties>
      <XmlArchive>
        <Data>
          <o xml:space="preserve" t="UMLStereoTypeContainerObject">
            <v n="IsType" t="UMLType">BaseArea</v>
            <v n="Stereotype">""</v>
            <d n="Stereotypes" t="Hashtable" />
          </o>
        </Data>
        <TypeList>
          <Type n="Hashtable">System.Collections.Hashtable</Type>
          <Type n="String">System.String</Type>
          <Type n="UMLStereoTypeContainerObject">{30250973-b110-4e31-b562-c102e042dca4}</Type>
          <Type n="UMLType">{0197b136-405a-42ee-bb27-fd08b621d0cf}</Type>
        </TypeList>
      </XmlArchive>
    </ObjectProperties>
    <LineIds Name="FB_ProBoxElementShuttleEmulation">
      <LineId Id="3" Count="35" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProBoxElementShuttleEmulation._M_OverWriteInputs">
      <LineId Id="3" Count="64" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProBoxElementShuttleEmulation.A_Init">
      <LineId Id="2" Count="26" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProBoxElementShuttleEmulation.A_UpdateReference">
      <LineId Id="2" Count="26" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProBoxElementShuttleEmulation.FB_init">
      <LineId Id="3" Count="0" />
      <LineId Id="8" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
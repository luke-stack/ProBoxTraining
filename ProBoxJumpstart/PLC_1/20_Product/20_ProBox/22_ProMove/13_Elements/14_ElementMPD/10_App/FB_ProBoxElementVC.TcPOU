<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_ProBoxElementVC" Id="{20feed4a-d43f-4f1b-b31c-40181b39d9f3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ProBoxElementVC EXTENDS FB_ProBoxElementVC_Base
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision:  $
 *	Revision date	:	$Date:  $
 *	Last changed by	:	$Author:  $
 *	URL				:	$URL: $
 *
 *	Purpose			:	ProBox element with 2 axis and 2 motor HW outputs (drive 1-2 / 3-4).
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	
 *
 **************************************************************************************)
VAR_INPUT
	Config					: ST_CFG_ProBoxElementVC; // Configuration 
	HW_Inputs				: ST_HW_InputsProBoxElementVC; // HW-Inputs 
END_VAR

VAR_OUTPUT
	HW_Outputs				: ST_HW_OutputsProBoxElementVC; // HW-Outputs 
END_VAR
VAR			
	i,j : INT := 1;
	MPD_Drive_HW_Inputs		: ST_HW_InputsMPD;
	MPD_Drive_HW_Outputs	: ST_HW_OutputsMPD;	
	//Private
	_VC_ForkData			: ST_VC_ForkData;
	_ForksInstance			: ITF_PB_ElementForkInterface; //Function Forks interface
	_DebugPrint				: BOOL;
END_VAR
VAR_TEMP	
	VCFunctionInterface		: ST_FunctionInterface;
	OpMcOff					: BOOL;
END_VAR

VAR PERSISTENT
	Settings				: ST_CFG_ProBoxElementVC; // Settings - activated configuration 
	FunctionData			: ST_FunctionData; // Function data - external read only 
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(**************************************************************************************************************
   Input mapping
***************************************************************************************************************)
A_InputMapping();


(**************************************************************************************************************
   Initialization
***************************************************************************************************************)
A_Init();


(**************************************************************************************************************
   State control
***************************************************************************************************************)
_M_StateControl(AdditionalConditionInhibitStopping:=fbMpdControl.CtrlOut.MotionRunning); //InhibitStopping is used to inhibit Element to set Stop state VC  is moving


(**************************************************************************************************************
   Error handler
***************************************************************************************************************)
M_MonitorElementErrors();


(**************************************************************************************************************
   Manual control
***************************************************************************************************************)
A_ManualControl();


(**************************************************************************************************************
   Handle element functions
***************************************************************************************************************)
A_HandleFunctions();


// Check for errors
_M_CheckErrors(		 
		HW_Inputs.Errors,
		Settings.SgGroupRef );


// Entry request control
M_ProcessEntryRequest(
				AkEntryPosition		:= Settings.AkEntryPosition,
				ApEntryPositions 	:= Settings.ApEntryPositions,
				SgGroupRef			:= Settings.SgGroupRef);
	 
 

//Run Fork Control (if fork function registrered)
_M_ForkStateControl();

(**************************************************************************************************************
// Run VC MPD controller
***************************************************************************************************************)
//Set conveyor brake data
fbMpdControl.ConvBrake[1] := HW_Outputs.DriveCV_A.MotorBrake_12;
fbMpdControl.ConvBrake[2] := HW_Outputs.DriveCV_B.MotorBrake_12;                

IF(__ISVALIDREF(Settings.SgGroupRef)) THEN
	OpMcOff := Settings.SgGroupRef.CtrlOut.OpSummary.OpMcOff; //NC operator MC off
END_IF

fbMpdControl(MPD_Config		:=MPD_Config,
			HW_Inputs			:=MPD_Drive_HW_Inputs,
			ElementData			:=ElementData,
			EmergencyStop		:= NOT OpMcOff, 			
			HW_Outputs			=>MPD_Drive_HW_Outputs,
			FunctionInterface 	=> VCFunctionInterface); // VC FunctionInterface will control element conveyour outputs); 


			
//Preset Encoder (homing encoder)
M_PresetEncoder(Settings.EncoderHoming,HW_Inputs.HomeSwitch);
			
(**********************************************************************************************************
  Conveyor Drive control
***********************************************************************************************************)
_M_DriveControl(VCFunctionInterface.Out.FunctionOrders, ElementData);

(**************************************************************************************************************
   Interface handler out
***************************************************************************************************************)
M_ITC_ProcessOut();


(**************************************************************************************************************
   Output mapping
***************************************************************************************************************)
A_OutputMapping();

]]></ST>
    </Implementation>
    <Folder Name="ForkControl" Id="{abfc8388-5f4e-4b3a-b10d-40684783a56d}" />
    <Method Name="_M_CheckVC_Fork_Config" Id="{e87f4ea4-a517-4257-812d-7756686f1fb4}" FolderPath="ForkControl\">
      <Declaration><![CDATA[//check fork properties in configuration
//Return: True = success, False = failure
METHOD PRIVATE _M_CheckVC_Fork_Config : BOOL
VAR_IN_OUT
	ErrorData		: ST_ErrorDataSet; //ElementData.ErrorData.ErrorDataSet[3]
END_VAR
VAR
	PosUpper : DINT;
	PosLower : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
_M_CheckVC_Fork_Config := TRUE;

FOR i:=1 TO GVL_MPD.MAXPDs DO
	IF(Settings.ConvCFG[i].eFunctionNumber <> E_FunctionNumber.F_BEGIN_FUNCTION) THEN
		//check that ConvCFG[x].PositionConv + ConvCFG[x].DepsitPositionOffset is significant larger (100mm) than  ConvCFG[x].PositionConv + ConvCFG[x].PickupPositionOffset
		PosUpper := Settings.ConvCFG[i].PositionConv + Settings.ConvCFG[i].DepsitPositionOffset;
		PosLower := Settings.ConvCFG[i].PositionConv + Settings.ConvCFG[i].PickupPositionOffset;
		IF((PosUpper-PosLower) <50) THEN
			F_SetError(	
						ErrorType	:= E_ErrorType.ERROR,
						ErrorParam	:= CONCAT('Fork upper/lower not enought(<50mm) ConvCFG index: ', INT_TO_STRING(i)), //the distance between upper and lower position is not enough
						ErrorMsg	:= E_ErrorConv.CONFIGURATION_ERROR,
						ErrorData	:= ErrorData);
			_M_CheckVC_Fork_Config := FALSE;
		END_IF	
			

		//check that ConvCFG[x].ForkStroke is larther than 500;
		IF(Settings.ConvCFG[i].ForkStroke < 500) THEN
			F_SetError(	
						ErrorType	:= E_ErrorType.ERROR,
						ErrorParam	:= CONCAT('Fork stroke not enought(<500mm) ConvCFG index: ', INT_TO_STRING(i)), //the distance between upper and lower position is not enough
						ErrorMsg	:= E_ErrorConv.CONFIGURATION_ERROR,
						ErrorData	:= ErrorData);
			_M_CheckVC_Fork_Config := FALSE;
		END_IF
	END_IF
END_FOR




]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_DefineForkProperties" Id="{bece56f5-9732-43ec-a84d-30ca6a4fce44}" FolderPath="ForkControl\">
      <Declaration><![CDATA[METHOD PRIVATE _M_DefineForkProperties : BOOL
VAR_IN_OUT
	MpdData			: ST_MPD_CV;	
	ErrorData		: ST_ErrorDataSet; //ElementData.ErrorData.ErrorDataSet[3]
END_VAR
VAR
	PD_Function		: E_FunctionNumber;
	ConfigIx		: INT;
	PD_Side			: E_PickupDepositSide;
	PD_Stroke		: INT;
	//PdConf			: ST_CFG_PDs;
	ConfigError		: BOOL:=FALSE;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF(MpdData.State = E_MPD_CvStates.E_CV_PICKUP) THEN
	PD_Function := MpdData.PickupFuncNumber;	
ELSIF(MpdData.State = E_MPD_CvStates.E_CV_DEPOSIT) THEN
	PD_Function := MpdData.DepositFuncNumber;		
ELSE
	//Error, not correct state. 
	ConfigError:=TRUE;
END_IF

//get the index of the PD station in configuration array
IF(NOT ConfigError) THEN
	FOR i:=1 TO GVL_MPD.MAXPDs DO
		IF(Settings.ConvCFG[i].eFunctionNumber = PD_Function ) THEN
			ConfigIx := i;
			EXIT;
		END_IF		
	END_FOR
END_IF

//Get side  and fork stroke
IF(NOT ConfigError) THEN
	PD_Side := Settings.ConvCFG[ConfigIx].Side;
	PD_Stroke := Settings.ConvCFG[ConfigIx].ForkStroke;
END_IF


IF(NOT ConfigError) THEN
	IF(PD_Side = E_PickupDepositSide.LeftSide) THEN
		_VC_ForkData.ForkRequest.OrderFork := E_FunctionForkOrder.E_ORDER_LEFT;
		_VC_ForkData.ForkRequest.ForkStroke := PD_Stroke*-1;
	ELSIF(PD_Side = E_PickupDepositSide.RightSide) THEN
		_VC_ForkData.ForkRequest.OrderFork := E_FunctionForkOrder.E_ORDER_RIGHT;
		_VC_ForkData.ForkRequest.ForkStroke := PD_Stroke;
	ELSE	
		//could not define side-> will cause timeout error
		ConfigError:=TRUE;
	END_IF
END_IF

IF(ConfigError) THEN
	F_SetError(	
					ErrorType	:= E_ErrorType.ERROR,
					ErrorParam	:= 'Could get config parameters(side or stroke length)',
					ErrorMsg	:= E_ErrorConv.CONFIGURATION_ERROR,
					ErrorData	:= ErrorData);
END_IF


IF(ConfigError) THEN
	_VC_ForkData.ForkRequest.OrderFork := E_FunctionForkOrder.E_ORDER_UNKNOWN;
	_VC_ForkData.ForkRequest.ForkStroke := 0;
END_IF

_M_DefineForkProperties := NOT ConfigError;]]></ST>
      </Implementation>
    </Method>
    <Method Name="_M_ForkStateControl" Id="{26fdd250-50d3-4a91-9938-4f63fe112ab1}" FolderPath="ForkControl\">
      <Declaration><![CDATA[METHOD PRIVATE _M_ForkStateControl : BOOL
VAR
	MpdData		: REFERENCE TO ST_MPD_CV;
	LastOpState	: INT;	
	VcMoveDist			: DINT;
	//OpState: INT;
END_VAR

VAR_INST
	//OpState 			: INT;	
	VcStable			: TON := (PT:=T#200MS);
	ForkStable 			: TON := (PT:=T#200MS);
	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Check that fork function is connected...
IF(_ForksInstance = 0) THEN
	 _VC_ForkData.ForkEnableDrive:=TRUE;  //when forks function not connected, enable drive.		
	RETURN;
END_IF


//get reference to mpd control data structure
MpdData REF= fbMpdControl.P_GetMpdData.CV[GVL_MPD.CV_A];

//
LastOpState := _VC_ForkData.State;
//-----------------------------------------------------------------
//Manual control
//-----------------------------------------------------------------
_VC_ForkData.ForkRequest.ManualControl.Op_Fork_Right 		:= MPD_Drive_HW_Inputs.ManualControl.Conv[GVL_MPD.CV_A].ConvFwd;
_VC_ForkData.ForkRequest.ManualControl.Op_Fork_Left 		:= MPD_Drive_HW_Inputs.ManualControl.Conv[GVL_MPD.CV_A].ConvRev;
_VC_ForkData.ForkRequest.ManualControl.OP_EmergencyDrive 	:= MPD_Drive_HW_Inputs.ManualControl.EmergencyDrive;


//-----------------------------------------------------------------
//auto control
//-----------------------------------------------------------------

//-----------------------------------------------------------------
//Get fork function status
IF(_ForksInstance <> 0) THEN			
		_VC_ForkData.ForkStatus := _ForksInstance.P_ForkStatus;
END_IF

VcStable(IN:= NOT fbMpdControl.CtrlOut.MotionRunning);
ForkStable(IN:= (_VC_ForkData.ForkStatus.ForkState = E_FunctionForkState.E_LEFT_COMPLETE AND _VC_ForkData.ForkRequest.OrderFork = E_FunctionForkOrder.E_ORDER_LEFT) OR
				(_VC_ForkData.ForkStatus.ForkState = E_FunctionForkState.E_RIGHT_COMPLETE AND _VC_ForkData.ForkRequest.OrderFork = E_FunctionForkOrder.E_ORDER_RIGHT) OR
				(_VC_ForkData.ForkStatus.ForkState = E_FunctionForkState.E_CENTER AND _VC_ForkData.ForkRequest.OrderFork = E_FunctionForkOrder.E_ORDER_CENTER) ); 

//Set some data
_VC_ForkData.ForkRequest.EmergencyStop := fbMpdControl.EmergencyStop;
_VC_ForkData.ForkRequest.CheckPdFree:=FALSE;

CASE _VC_ForkData.State OF
	
	0: //Init
		IF(_M_CheckVC_Fork_Config(ElementData.ErrorData.ErrorDataSet[3])) THEN
			//init was successfully
			_VC_ForkData.State:=_VC_ForkData.State+1; //move to next step in state machine				
		END_IF
		_VC_ForkData.ForkEnableDrive:=FALSE;
	
	1: //Idle
		_VC_ForkData.ForkRequest.OrderFork := E_FunctionForkOrder.E_ORDER_CENTER;
		_VC_ForkData.ForkRequest.ForkStroke := 0;
		_VC_ForkData.ForkEnableDrive:=FALSE;
		
		IF(ElementData.ErrorData.ErrorState <> E_ErrorState.ERROR) THEN
			IF(MpdData.State = E_MPD_CvStates.E_CV_PICKUP) THEN
				_VC_ForkData.State:= 101;		
			ELSIF(MpdData.State = E_MPD_CvStates.E_CV_DEPOSIT) THEN
				_VC_ForkData.State:= 201;
			END_IF
		END_IF
		
	//Pickup
	101: //Move Fork out		
		fbMpdControl.CtrlIn.HoldPosition:=TRUE;
		
		//request fork operation -> cofigured side and fork stroke		
		IF(NOT _M_DefineForkProperties(MpdData,ElementData.ErrorData.ErrorDataSet[3])) THEN
			_VC_ForkData.State:=0;
		ELSE			
			VcStable(IN:=FALSE);	
			_VC_ForkData.State:=_VC_ForkData.State+1; //move to next step in state machine
		END_IF	
		
	102:	//wait and check fork is out
		IF(ForkStable.Q) THEN
			_VC_ForkData.State:=_VC_ForkData.State+1; //move to next step in state machine			
		END_IF
		
	103: // Move VC UP				
		//Set DriveParameter index (with another speed profile)
		fbMpdControl.P_SetDriveParameterIndex := 2;
		//request fork operation -> cofigured side and fork stroke
		VcMoveDist := fbMpdControl.M_GetDesiredPosition(MpdData.PickupFuncNumber,GVL_MPD.CV_A,FALSE,TRUE) - fbMpdControl.M_GetDesiredPosition(MpdData.PickupFuncNumber,GVL_MPD.CV_A,TRUE,FALSE);
		M_SetHeightCorrection(TRUE,FALSE,DINT_TO_INT(VcMoveDist),0);
		VcStable(IN:=FALSE);
		_VC_ForkData.State:=_VC_ForkData.State+1; //move to next step in state machine
		
	104:	//check VC is moved up
		IF(VcStable.Q) THEN
			VcStable(IN:=FALSE);			
			_VC_ForkData.State:=_VC_ForkData.State+1; //move to next step in state machine
		END_IF		
			
	105: // Move Fork In (to home) and enable DriveReady to allow normal transport with transport control
		_VC_ForkData.ForkEnableDrive:=TRUE; //enable Drive
		_VC_ForkData.ForkRequest.OrderFork := E_FunctionForkOrder.E_ORDER_CENTER;
		ForkStable(IN:=FALSE);		
		_VC_ForkData.State:=_VC_ForkData.State+1; //move to next step in state machine
		
		
	106: // check TU in fork home pos		
		IF(ForkStable.Q) THEN
			_VC_ForkData.State:=_VC_ForkData.State+1; //move to next step in state machine
		END_IF		
		
	107: // Done
		fbMpdControl.P_SetDriveParameterIndex := 1;
		fbMpdControl.CtrlIn.HoldPosition:=FALSE;
		IF(MpdData.State <> E_MPD_CvStates.E_CV_PICKUP) THEN
			_VC_ForkData.State:=0;
		END_IF
		
		
		
		
	//Deposit
	201: // Move Fork Out and start transport with transportControl (enable DriveReady)
		fbMpdControl.CtrlIn.HoldPosition:=TRUE;
		_VC_ForkData.ForkEnableDrive:=TRUE; //Enable drive
		_VC_ForkData.ForkRequest.CheckPdFree:=TRUE; // enable FB_FunctionFork to check that TS is free
		//request fork operation
		IF(NOT _M_DefineForkProperties(MpdData,ElementData.ErrorData.ErrorDataSet[3])) THEN
			_VC_ForkData.State:=0;
		ELSE	
			VcStable(IN:=FALSE);
			_VC_ForkData.State:=_VC_ForkData.State+1; //move to next step in state machine
		END_IF	
		
	202: //Check Fork out (left or right) pos
		IF(ForkStable.Q) THEN
			_VC_ForkData.State:=_VC_ForkData.State+1; //move to next step in state machine
		END_IF
		
	203: // Move VC down
		//Set DriveParameter index (with another speed profile)
		fbMpdControl.P_SetDriveParameterIndex := 2;
		VcMoveDist := fbMpdControl.M_GetDesiredPosition(MpdData.DepositFuncNumber,GVL_MPD.CV_A,TRUE,FALSE) - fbMpdControl.M_GetDesiredPosition(MpdData.DepositFuncNumber,GVL_MPD.CV_A,FALSE,TRUE);		
		M_SetHeightCorrection(FALSE,TRUE,0,DINT_TO_INT(VcMoveDist) (*negative distance*));
		VcStable(IN:=FALSE);
		_VC_ForkData.State:=_VC_ForkData.State+1; //move to next step in state machine
	
	204: //check VC is down(pallet resting on rack)
		IF(VcStable.Q) THEN
			_VC_ForkData.State:=_VC_ForkData.State+1; //move to next step in state machine
		END_IF
	
	205: // Move Fork in (to Home)
		_VC_ForkData.ForkRequest.OrderFork := E_FunctionForkOrder.E_ORDER_CENTER;
		ForkStable(IN:=FALSE);
		_VC_ForkData.State:=_VC_ForkData.State+1; //move to next step in state machine		
		
	206: //Check Fork in Home pos
		IF(ForkStable.Q) THEN
			_VC_ForkData.State:=_VC_ForkData.State+1; //move to next step in state machine
		END_IF
		
	207: //Done
		fbMpdControl.P_SetDriveParameterIndex := 1;
		fbMpdControl.CtrlIn.HoldPosition:=FALSE;
		IF(MpdData.State <> E_MPD_CvStates.E_CV_DEPOSIT) THEN
			_VC_ForkData.State:=0;
		END_IF	
	
	ELSE
		;
		
END_CASE

//-----------------------------------------------------------------
IF(_VC_ForkData.State<>LastOpState AND _DebugPrint) THEN
	fbDebugMsg.M_SendInfoMsg(CONCAT('ForkState: ',TO_STRING(_VC_ForkData.State)));
END_IF


IF(_ForksInstance <> 0) THEN
		_ForksInstance.P_ForkRequest := _VC_ForkData.ForkRequest;		
END_IF]]></ST>
      </Implementation>
    </Method>
    <Action Name="A_Init" Id="{72aa9fc1-2c6f-48f2-8acf-382f81de65b4}">
      <Implementation>
        <ST><![CDATA[(**************************************************************************************
 * 	NAME		A_Init
 * 	FUNCTION	Initialize element
 **************************************************************************************)
 
 IF NOT ElementData.Init AND NOT ElementData.InitRunning THEN
	
	 // Load function specific configuration to settings
	Settings := Config;
		
	
	//Set MPD control configurations (Motion Pickup n Deposit)
	//MPD_Config.ConvCFG 				:= Settings.ConvCFG;	
	FOR j:=1 TO GVL_MPD.MAXPDs DO
		MEMCPY(ADR(MPD_Config.ConvCFG[j]),ADR(Settings.ConvCFG[j]),SIZEOF(ST_CFG_PDs));
	END_FOR
		
	MPD_Config.CvCC					:= Settings.CvCC;
	MPD_Config.DriveCFG				:= Settings.DriveCFG;
	MPD_Config.EnableIdlePosition	:= Settings.EnableIdlePosition;
	MPD_Config.EncoderHysterisis	:= Settings.EncoderHysterisis;	
	MPD_Config.IdlePosition			:= Settings.IdlePosition;
	MPD_Config.TimeOutMove			:= Settings.TimeOutMove;
	MPD_Config.MPD_Type				:= E_MotionPD_Type.E_VerticalCv;
	MPD_Config.EncoderHoming		:= Settings.EncoderHoming;	
	//Set element configuration
	SUPER^.BaseSettings.BrakeTime := Settings.BrakeTime;
	SUPER^.BaseSettings.ElementSpeed := Settings.ElementSpeed;
	
	
	
 END_IF
 
SUPER^.A_Init();
]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_InputMapping" Id="{621f2c9c-e69e-42f3-9e10-af570c3b703a}">
      <Implementation>
        <ST><![CDATA[(**************************************************************************************
 * 	NAME		A_InputMapping
 * 	FUNCTION	Input mapping
 **************************************************************************************)
 
 
(**************************************************************************************
   Map HW Inputs
***************************************************************************************)
Inputs.MotorUnitOK := HW_Inputs.MotorUnitOK;

MPD_Drive_HW_Inputs.Conv := HW_Inputs.Conv;
MPD_Drive_HW_Inputs.DriveInputs := HW_Inputs.DriveInputs;

	
//Summarize signals from all AP's in the array
IF(__ISVALIDREF(Settings.SgGroupRef)) THEN
	// manual controls of the carriage only allowed if switch is in manual mode
	MPD_Drive_HW_Inputs.ManualControl.Conv[GVL_MPD.CV_A].ConvFwd := Settings.SgGroupRef.CtrlOut.OpSummary.Conv[GVL_MPD.CV_A].OpDriveCvFwd;
    MPD_Drive_HW_Inputs.ManualControl.Conv[GVL_MPD.CV_A].ConvRev := Settings.SgGroupRef.CtrlOut.OpSummary.Conv[GVL_MPD.CV_A].OpDriveCvRev;
    MPD_Drive_HW_Inputs.ManualControl.Conv[GVL_MPD.CV_B].ConvFwd := Settings.SgGroupRef.CtrlOut.OpSummary.Conv[GVL_MPD.CV_B].OpDriveCvFwd;
    MPD_Drive_HW_Inputs.ManualControl.Conv[GVL_MPD.CV_B].ConvRev := Settings.SgGroupRef.CtrlOut.OpSummary.Conv[GVL_MPD.CV_B].OpDriveCvRev;
    MPD_Drive_HW_Inputs.ManualControl.DriveFwd := Settings.SgGroupRef.CtrlOut.OpSummary.Conv[GVL_MPD.CV_A].OpMovePos;
    MPD_Drive_HW_Inputs.ManualControl.DriveRev := Settings.SgGroupRef.CtrlOut.OpSummary.Conv[GVL_MPD.CV_A].OpMoveNeg;
    MPD_Drive_HW_Inputs.ManualControl.EmergencyDrive := Settings.SgGroupRef.CtrlOut.OpSummary.OpEmgDrive;
ELSE
	MEMSET(ADR(MPD_Drive_HW_Inputs.ManualControl), 0, SIZEOF(ST_HW_InputsManControl));
END_IF



//call base element action block
SUPER^.A_InputMapping();

]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_OutputMapping" Id="{7a69c44f-2967-484c-8b4f-196f00e9fbf7}">
      <Implementation>
        <ST><![CDATA[(**************************************************************************************
 * 	NAME		A_OutputMapping
 * 	FUNCTION	Handles element specific outpus
 **************************************************************************************)

(**************************************************************************************
   Map HW Outputs
***************************************************************************************)
HW_Outputs.DriveCV_A.Drive_Run_12		:= fbProBoxMotorControl_12.Forward;
HW_Outputs.DriveCV_A.Drive_Run_21		:= fbProBoxMotorControl_12.Reverse;
HW_Outputs.DriveCV_A.Drive_Creep_12		:= fbProBoxMotorControl_12.CreepSpeed;
HW_Outputs.DriveCV_A.Drive_Low_12		:= fbProBoxMotorControl_12.LowSpeed;
HW_Outputs.DriveCV_A.MotorBrake_12		:= fbProBoxMotorControl_12.BrakeRelease;

HW_Outputs.DriveCV_B.Drive_Run_12		:= fbProBoxMotorControl_34.Forward;
HW_Outputs.DriveCV_B.Drive_Run_21		:= fbProBoxMotorControl_34.Reverse;
HW_Outputs.DriveCV_B.Drive_Creep_12		:= fbProBoxMotorControl_34.CreepSpeed;
HW_Outputs.DriveCV_B.Drive_Low_12		:= fbProBoxMotorControl_34.LowSpeed;
HW_Outputs.DriveCV_B.MotorBrake_12		:= fbProBoxMotorControl_34.BrakeRelease;
 
HW_Outputs.VCDrive.MotionOutputHigh		:= MPD_Drive_HW_Outputs.MotionOutputHigh;
HW_Outputs.VCDrive.MotionOutputLow		:= MPD_Drive_HW_Outputs.MotionOutputLow;
HW_Outputs.VCDrive.DriveOutputs			:= MPD_Drive_HW_Outputs.DriveOutputs;
HW_Outputs.VCDrive.EnableDrive			:= MPD_Drive_HW_Outputs.EnableDrive;





(**************************************************************************************
   Map element interface
***************************************************************************************)

ElementData.FunctionOrder.Enable := ElementData.FunctionOrder.Enable AND _VC_ForkData.ForkEnableDrive; //Set ElementInterface.Out.State.DriveReady

// interface axis 1-2
SUPER^.A_OutputMapping();
]]></ST>
      </Implementation>
    </Action>
    <Property Name="P_RegisterFuncton" Id="{22f492bb-b7e7-4097-b9bb-22626940c749}" FolderPath="ForkControl\">
      <Declaration><![CDATA[//Property to register an function that shall be used by the Element.
PROPERTY PUBLIC P_RegisterFuncton : PVOID]]></Declaration>
      <Get Name="Get" Id="{e5f40cf0-f4d7-4f8d-a741-81187474f8cd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[P_RegisterFuncton := ADR(_ForksInstance); 
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{100d9a88-4d3b-4943-b280-615c2a88ff60}">
        <Declaration><![CDATA[VAR
	pFunction					: POINTER TO FB_ElementForkInterface :=0;
	ITF_ForkInstance			: ITF_PB_ElementForkInterface;
END_VAR
VAR CONSTANT	
	ITF_TypeCheck				: ITF_PB_ElementForkInterface :=0;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[
pFunction := P_RegisterFuncton;
ITF_ForkInstance := pFunction^;
IF(ITF_ForkInstance <> 0) THEN			
	IF(__QUERYINTERFACE(ITF_ForkInstance,ITF_TypeCheck)) THEN
		_ForksInstance := ITF_ForkInstance;
		RETURN;		
	END_IF			
END_IF
_ForksInstance:=0; //not successfully assigned
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <LineIds Name="FB_ProBoxElementVC">
      <LineId Id="516" Count="35" />
      <LineId Id="657" Count="1" />
      <LineId Id="812" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="554" Count="2" />
      <LineId Id="858" Count="0" />
      <LineId Id="861" Count="0" />
      <LineId Id="863" Count="1" />
      <LineId Id="862" Count="0" />
      <LineId Id="564" Count="0" />
      <LineId Id="716" Count="0" />
      <LineId Id="715" Count="0" />
      <LineId Id="717" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="565" Count="5" />
      <LineId Id="866" Count="3" />
      <LineId Id="573" Count="7" />
      <LineId Id="763" Count="0" />
      <LineId Id="610" Count="0" />
      <LineId Id="765" Count="0" />
      <LineId Id="764" Count="0" />
      <LineId Id="581" Count="0" />
      <LineId Id="613" Count="2" />
      <LineId Id="611" Count="0" />
      <LineId Id="595" Count="11" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProBoxElementVC._M_CheckVC_Fork_Config">
      <LineId Id="7" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="55" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="32" Count="3" />
      <LineId Id="24" Count="2" />
      <LineId Id="56" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="44" Count="3" />
      <LineId Id="42" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProBoxElementVC._M_DefineForkProperties">
      <LineId Id="125" Count="52" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProBoxElementVC._M_ForkStateControl">
      <LineId Id="461" Count="6" />
      <LineId Id="674" Count="0" />
      <LineId Id="673" Count="0" />
      <LineId Id="469" Count="1" />
      <LineId Id="672" Count="0" />
      <LineId Id="705" Count="2" />
      <LineId Id="704" Count="0" />
      <LineId Id="712" Count="2" />
      <LineId Id="709" Count="0" />
      <LineId Id="708" Count="0" />
      <LineId Id="710" Count="1" />
      <LineId Id="472" Count="2" />
      <LineId Id="669" Count="0" />
      <LineId Id="475" Count="0" />
      <LineId Id="477" Count="1" />
      <LineId Id="488" Count="5" />
      <LineId Id="496" Count="0" />
      <LineId Id="715" Count="0" />
      <LineId Id="497" Count="10" />
      <LineId Id="651" Count="0" />
      <LineId Id="508" Count="0" />
      <LineId Id="730" Count="0" />
      <LineId Id="509" Count="6" />
      <LineId Id="649" Count="0" />
      <LineId Id="516" Count="9" />
      <LineId Id="689" Count="0" />
      <LineId Id="526" Count="6" />
      <LineId Id="667" Count="0" />
      <LineId Id="533" Count="0" />
      <LineId Id="666" Count="0" />
      <LineId Id="534" Count="12" />
      <LineId Id="729" Count="0" />
      <LineId Id="547" Count="22" />
      <LineId Id="731" Count="0" />
      <LineId Id="570" Count="4" />
      <LineId Id="576" Count="0" />
      <LineId Id="690" Count="0" />
      <LineId Id="577" Count="6" />
      <LineId Id="668" Count="0" />
      <LineId Id="584" Count="4" />
      <LineId Id="590" Count="27" />
      <LineId Id="627" Count="0" />
      <LineId Id="629" Count="6" />
      <LineId Id="409" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProBoxElementVC.A_Init">
      <LineId Id="162" Count="5" />
      <LineId Id="173" Count="3" />
      <LineId Id="178" Count="19" />
      <LineId Id="199" Count="2" />
      <LineId Id="209" Count="0" />
      <LineId Id="202" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProBoxElementVC.A_InputMapping">
      <LineId Id="46" Count="9" />
      <LineId Id="80" Count="1" />
      <LineId Id="99" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="179" Count="1" />
      <LineId Id="182" Count="8" />
      <LineId Id="178" Count="0" />
      <LineId Id="74" Count="5" />
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProBoxElementVC.A_OutputMapping">
      <LineId Id="90" Count="19" />
      <LineId Id="129" Count="0" />
      <LineId Id="143" Count="2" />
      <LineId Id="213" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="194" Count="0" />
      <LineId Id="141" Count="1" />
      <LineId Id="126" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="237" Count="0" />
      <LineId Id="236" Count="0" />
      <LineId Id="127" Count="1" />
      <LineId Id="60" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProBoxElementVC.P_RegisterFuncton.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProBoxElementVC.P_RegisterFuncton.Set">
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
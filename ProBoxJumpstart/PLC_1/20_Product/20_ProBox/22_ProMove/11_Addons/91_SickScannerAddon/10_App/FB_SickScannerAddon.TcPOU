<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_SickScannerAddon" Id="{13d32097-8fb6-4e91-bcfd-49437485bca1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SickScannerAddon EXTENDS FB_SickScannerBase
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: $
 *	Revision date	:	$Date: $
 *	Last changed by	:	$Author: $
 *	URL				:	$URL: $
 *
 *	Purpose			:	Sick function scanner 
 *						This scanner reads a label and determines the corresponding TU Data index.
 *						If the read label was already known, the existing index will be returned. 
 *						Otherwise a new one will be created.
 *						If no valid label could be determined - no index will be generated.
 *						Noread = no index!
 *
 *						Counter1 - Good reads
 *						Counter2 - No reads
 *						Counter3 - bad reads
 *						Counter4 - continous no reads
 *						Counter5 - Spare
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	
 **************************************************************************************)
VAR_INPUT
	Config					: ST_CFG_SickScanner;
	CtrlIn					: ST_CtrlInSickScanner;
	HW_Inputs				: ST_HW_InputsSickScanner;	
END_VAR

VAR_OUTPUT	
	HW_Outputs				: ST_HW_OutputsSickScanner; // Hardware scanner outputs
	CtrlOut					: ST_CtrlOutSickScanner;
END_VAR

VAR
	Inputs					: ST_InputsSickScanner; // Scanner Inputs 
	Outputs					: ST_OutputsSickScanner; // Scanner outputs	
END_VAR

VAR PERSISTENT
	Settings				: ST_CFG_SickScanner; // Settings
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[(**************************************************************************************************************
   Input mapping
***************************************************************************************************************)
A_InputMapping();

(**************************************************************************************************************
   Initialization
***************************************************************************************************************)
A_Init();

(**************************************************************************************************************
   State control 
***************************************************************************************************************)
A_StateControl();

(**************************************************************************************************************
   Error handler
***************************************************************************************************************)
A_ErrorHandler();
(* call to fb_AddOnErrHandler() is not needed as this Add on is clickble from SPOC*)  


(**************************************************************************************************************
   Scanner addon control
***************************************************************************************************************)
M_ScannerControl();

(**************************************************************************************************************
   Interface handler out
***************************************************************************************************************)
M_ITC_ProcessOut();

(**************************************************************************************************************
   Output mapping
***************************************************************************************************************)
A_OutputMapping();

]]></ST>
    </Implementation>
    <Action Name="A_DataAquisition" Id="{8c8dbdee-8719-4b1a-a7f6-56a54ad0ec2c}">
      <Implementation>
        <ST><![CDATA[(**************************************************************************************
 * 	NAME		A_DataAquisition 
 * 	FUNCTION	Call Method for Condition Monitoring 
 **************************************************************************************)
 
				
	M_ITC_DataAquisition(	mVariableName				:= 'SacannerRead', 
								meCM_Index				:= E_CM_Index.CM01,
								mPosition				:= SettingsFunction.FunctionName,
								mCurrentValue			:= DWORD_TO_STRING(MainConv.fbGetSystemTime.timeLoDW), 
								meMode					:= E_CM_Mode.DEFAULT);]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_Init" Id="{477fa612-6b66-45e9-8930-1d04eff58c22}">
      <Implementation>
        <ST><![CDATA[(**************************************************************************************
 * 	NAME		A_Init
 * 	FUNCTION	Initialize function
 **************************************************************************************)


 IF NOT FunctionData.Init AND FunctionData.InitRunning  THEN
	 // Load function specific configuration to settings
	Settings := Config;	
 END_IF
 
SUPER^.A_Init();]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_InputMapping" Id="{8a045b62-5962-499f-9eea-a2714d21cc3e}">
      <Implementation>
        <ST><![CDATA[(**************************************************************************************
 * 	NAME		A_InputMapping
 * 	FUNCTION	Input mapping
 **************************************************************************************)
  
(**************************************************************************************
   Input mapping
***************************************************************************************)
// Control word in
Inputs.GoodRead				:= HW_Inputs.ControlWordIn.2;
//Inputs.DeviceReady			:= HW_Inputs.ControlWordIn.1;
//Inputs.NoRead				:= HW_Inputs.ControlWordIn.3;

Inputs.ConfMessageIn		:= HW_Inputs.ConfMessageIn;
Inputs.Heartbeat			:= HW_Inputs.ConfMessageIn[0].2;

Inputs.CtrlIn				:= CtrlIn;

 
(**************************************************************************************
   Element states
***************************************************************************************)
// Get status of the corresponding element and store it internally FunctionInterface.In.Element
M_GetElementStates();

					
(**************************************************************************************
   AddOn states
***************************************************************************************)
// Get status of all corresponding AddOn functions and store it in FunctionInterface.In.AddOnOrder
M_GetAddOnOrder();

(*
Ctrl bits In
Bit		Name Meaning
D0		Device Ready Status of the CLV61x Dual Port
D1		Reserved
D2		Good Read * Status of the last read results *
D3		No Read * Status of the last read results *
D4		External Output 1 Only available as a bit logical, no hardware output
D5		External output 2 Only available as a bit logical, no hardware output
D6		Result 1 Only available as a bit logical, no hardware output
D7		Result 2 Only available as a bit logical, no hardware output
D8		Reserved
D9		Reserved
D10		Sensor 1 Status of dig. input sensor 1.(Hardware dependent, equipment type on request)
D11		Reserved
D12		Reserved
D13		Reserved
D14		Reserved
D15		Toggle Inverted after each read cycle.
Observe byte order: D0 stands for the least significant bit of Add.+1.
* The bits are valid if the "Toggle" bit changes.
*)]]></ST>
      </Implementation>
    </Action>
    <Action Name="A_OutputMapping" Id="{169c4369-5dd7-4cd1-903e-a3a3b798bc09}">
      <Implementation>
        <ST><![CDATA[(**************************************************************************************
 * 	NAME		A_OutputMapping
 * 	FUNCTION	Output mapping
 **************************************************************************************)
 
 
(**************************************************************************************
   Hardware outputs
***************************************************************************************)

//For CLV630-650
HW_Outputs.ControlWordOut.0		:= Outputs.Trigger;
HW_Outputs.ConfMessageOut		:= Outputs.ConfMessageOut;

//Ctrl out
CtrlOut.Busy	:= BaseFunctionData.Busy;
CtrlOut.Ready	:= BaseFunctionData.Ready;

//Base function output mapping
M_OutputMapping();



]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_ScannerControl" Id="{31d79ac6-92d1-4239-9ec5-611e245fb75c}">
      <Declaration><![CDATA[METHOD PRIVATE M_ScannerControl : BOOL
VAR_INPUT
END_VAR
VAR
	Trig					: BOOL; //Trig signal to start scanner	
	path : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(**************************************************************************************************************
	Scanner addon functions
***************************************************************************************************************)
//reset all errors
_M_ResetErrors();

//theck if there are too many no read attempts
_M_MonitorNoReadSeries(AcceptedNoReadSeries:=Settings.AcceptedNoReadSeries);

//monitor the scanner heart beat signal
_M_MonitorCommunication(Heartbeat:= Inputs.Heartbeat, ComTimeout:=Settings.tComTimeout);

//Get trigger (from either controls input or desition taken by the addon itself.
Trig := _M_DetectTrigger(Inputs.CtrlIn.ExternTrigger, Settings.EnableExternalTrigger);

//run the state machine
_M_StateControl(
		Trigger					:= Trig,
		ScannerGoodRead			:= Inputs.GoodRead,
		MaxLabelLength			:= Settings.MaxLabelLength, 
		MoveDataLabelField		:= Settings.MoveDataLabelField,
		SendTTQ					:= Settings.SendTTQ,
		ScannerConfigFilePath	:= Settings.ConfigFilePath,
		TrigScanner				=> Outputs.Trigger);

//Write data to scanner
_M_CLV6xWriteData(
		Execute					:= BaseFunctionData.WriteData.TrigWrite,
		WriteData				:= BaseFunctionData.WriteData.Data,		
		ConfMsgIn				:= Inputs.ConfMessageIn, 
		ConfMsgOut				:= Outputs.ConfMessageOut,
		Busy					=> BaseFunctionData.WriteData.Busy);
		
//Decode scanner data (Conf message input data)
_M_CLV6xReadData(
		ClearBuffer				:= BaseFunctionData.State.eState = E_SickScannerState.IDLE, //when were idling-> clear buffer if there are garbage of any reason.
		CopyBuffer				:= BaseFunctionData.State.eState = E_SickScannerState.READ OR BaseFunctionData.State.eState = E_SickScannerState.COM OR BaseFunctionData.State.eState = E_SickScannerState.CONFIG,	
		ScannerLabel			:= BaseFunctionData.LabelData, 
		ConfMsgIn				:= Inputs.ConfMessageIn, 
		ConfMsgOut				:= Outputs.ConfMessageOut);

	]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties>
      <XmlArchive>
        <Data>
          <o xml:space="preserve" t="UMLStereoTypeContainerObject">
            <v n="IsType" t="UMLType">BaseArea</v>
            <v n="Stereotype">""</v>
            <d n="Stereotypes" t="Hashtable" />
          </o>
        </Data>
        <TypeList>
          <Type n="Hashtable">System.Collections.Hashtable</Type>
          <Type n="String">System.String</Type>
          <Type n="UMLStereoTypeContainerObject">{30250973-b110-4e31-b562-c102e042dca4}</Type>
          <Type n="UMLType">{0197b136-405a-42ee-bb27-fd08b621d0cf}</Type>
        </TypeList>
      </XmlArchive>
    </ObjectProperties>
    <LineIds Name="FB_SickScannerAddon">
      <LineId Id="3" Count="36" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SickScannerAddon.A_DataAquisition">
      <LineId Id="2" Count="9" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_SickScannerAddon.A_Init">
      <LineId Id="2" Count="10" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_SickScannerAddon.A_InputMapping">
      <LineId Id="2" Count="52" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_SickScannerAddon.A_OutputMapping">
      <LineId Id="2" Count="22" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_SickScannerAddon.M_ScannerControl">
      <LineId Id="3" Count="21" />
      <LineId Id="50" Count="0" />
      <LineId Id="25" Count="17" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FB_PB_PresetEncoder" Id="{64c5ed88-f69d-4bac-8664-7eea32ffeb09}" SpecialFunc="None">
    <Declaration><![CDATA[//Set preset value to encoder
//An ESR (Element status report telegram) is sent in order to save the status in synq database.
FUNCTION_BLOCK FB_PB_PresetEncoder
VAR_INPUT
	ElementNumber	: E_ElementNumber;					// the Functionnumber where the ESR shall be sent from
	NetId			: T_AmsNetId := ''; 				//NetId of EtherCAT Master (ex 192.31.3.1.2.1)
	SlaveAddr		: UINT := 1030; 					//Port Number of EtherCAT Slave
	Index			: WORD := 16#6003; 					//CoE Object Index
	SubIndex        : BYTE := 0; 						//Subindex of CoE Object		
	OpKeySwitch		: BOOL;							// operator key switch trigging an SDO write
	EnableWrite		: BOOL;							// endable SDO write, ie Correct conditions must be met to start writing to encoder
	PresetValue		: UDINT;
	rfbDebugMsg 	: REFERENCE TO FB_DebugMsg;		//Reference to a FB_DebugMsg object for logging purpose
END_VAR
VAR_IN_OUT
	ErrorData 		: ST_ErrorDataSet;
END_VAR


VAR_OUTPUT
END_VAR
VAR
	fbSdoWrite      : FB_EcCoESdoWrite;
	OpSwitchTmr		: TON := (PT:=T#5S);
	SdoState		: INT;	
END_VAR

VAR_TEMP
	InternalTrigger : BOOL;
	ErrType			:E_ErrorType;
	ErrParam		:STRING(system.ERROR_PARAM_STRINGLENGTH); 
	rReg			:REFERENCE TO ST_ElementRegistryConv;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[

CASE SdoState OF
	0:	//Check that op key switch is not stiched to TRUE, we need an positive edge to continue
		OpSwitchTmr(IN:=FALSE); 
		IF(OpKeySwitch=FALSE AND EnableWrite) THEN
			SdoState:=SdoState+1;
		END_IF
		
	1:	//wait for an positive edge on the operator key switch
		OpSwitchTmr(IN:=OpKeySwitch AND EnableWrite);
		IF(NOT EnableWrite) THEN
			SdoState:=0;
		ELSIF(NOT fbSdoWrite.bBusy AND OpSwitchTmr.Q) THEN
			SdoState:=SdoState+1;
		END_IF
	2: //Trigg writing
		InternalTrigger:=TRUE;
		SdoState:=SdoState+1;
	3:  //wait for writing to complete
		IF(NOT fbSdoWrite.bBusy) THEN
			SdoState:=SdoState+1;		
		END_IF
	4:  //writing complete
		IF(fbSdoWrite.bError) THEN
			ErrType := E_ErrorType.ERROR;
			ErrParam:= 'Preset Encoder FAILED';
			F_SetError(
						ErrorType 	:= E_ErrorType.ERROR, 
						ErrorParam 	:= 'Preset Encoder FAILED', 
						ErrorMsg 	:= E_ErrorConv.MAINTENANCE, 
						ErrorData 	:= ErrorData);	 
			
			fbFormatString(sFormat := 'Error while resetting encoder. Slaveaddr: %d, ADS Code: %d', arg1 := F_UINT(SlaveAddr), arg2 := F_UDINT(fbSdoWrite.nErrId));
			IF(__ISVALIDREF(rfbDebugMsg)) THEN
				rfbDebugMsg.M_SendErrorMsg(fbFormatString.sOut);
			END_IF
		ELSE
			ErrType 	:= E_ErrorType.INFO;
			ErrParam	:= 'Preset Encoder success';		
			IF(__ISVALIDREF(rfbDebugMsg)) THEN			
				rfbDebugMsg.M_SendErrorMsg('Preset encoder successfully');
			END_IF			
		END_IF
		
		
		//Send ESR 
		IF(ElementNumber > E_ElementNumber.E_BEGIN_ELEMENT AND ElementNumber < E_ElementNumber.E_END_ELEMENT) THEN
			rReg REF= ElementRegistry[ElementNumber]; 	
			
			IF( __ISVALIDREF(rReg.rElementInterface)) AND 
				__ISVALIDREF(rReg.rElementData) AND
				__ISVALIDREF(rReg.rSettingsElement) THEN
		
			//send FSR, since the ErrorType INFO or Error already being active, we need to send FSR telegram in order for it to be present in SynQ / Logging & Statistics 		
				F_ITC_SendESR(
						eChannelSrc		:= 0, 
						ElementName		:= F_ReduceToAlphaNumeric(rReg.rSettingsElement.ElementName),
						eState			:= rReg.rElementData.OperationState.eState,
						Enabled			:= rReg.rElementInterface.In.ElementEnable,
						eErrorState		:= rReg.rElementData.ErrorData.ErrorState,
						eErrorCode		:= E_ErrorConv.MAINTENANCE,
						eErrorType		:= ErrType,
						ErrorInformation:= ErrParam,
						Variable		:= 0,
						eReturnCode		:= E_ErrorConv.NO_ERROR_CODE);
			END_IF	
		END_IF
		SdoState:=SdoState+1;
		
	ELSE		
		SdoState:=0;	
END_CASE

	fbSdoWrite(
		sNetId 		:= NetId,
		nSlaveAddr 	:= SlaveAddr,
		nSubIndex	:= SubIndex, (* Subindex of CoE Object *)
		nIndex		:= Index,
		pSrcBuf     := ADR(PresetValue),
        cbBufLen    := SIZEOF(PresetValue),
		bExecute	:= InternalTrigger,
		tTimeout	:= DEFAULT_ADS_TIMEOUT);
		 
		
	OpSwitchTmr();]]></ST>
    </Implementation>
    <LineIds Name="FB_PB_PresetEncoder">
      <LineId Id="26" Count="10" />
      <LineId Id="136" Count="2" />
      <LineId Id="38" Count="19" />
      <LineId Id="119" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="120" Count="0" />
      <LineId Id="59" Count="2" />
      <LineId Id="68" Count="1" />
      <LineId Id="122" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="126" Count="2" />
      <LineId Id="125" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="129" Count="2" />
      <LineId Id="124" Count="0" />
      <LineId Id="72" Count="3" />
      <LineId Id="78" Count="1" />
      <LineId Id="87" Count="0" />
      <LineId Id="89" Count="4" />
      <LineId Id="132" Count="0" />
      <LineId Id="94" Count="17" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
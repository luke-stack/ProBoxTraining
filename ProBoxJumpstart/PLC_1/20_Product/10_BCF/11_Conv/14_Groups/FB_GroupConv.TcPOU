<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_GroupConv" Id="{cb57c1cf-1823-426c-8661-6d3df7fba2e6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_GroupConv EXTENDS FB_BaseObject
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/14_Groups/10_Lib/10_Conv/FB_GroupConv.TcPOU $
 *
 *	Purpose			:	Group.
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
VAR_INPUT
	ConfigGroup				: ST_CFG_Group; // Base group configuration 
END_VAR

VAR
	GroupBase				: ST_GroupBase; // Summary of variables used from framework
END_VAR

VAR PERSISTENT
	ITC						: ST_ITC_Group; // Internal ITC			
	GroupData				: ST_GroupData; // General data 
	GroupInterface			: ST_GroupInterface; // Group interface
	SettingsGroup			: ST_CFG_Group; // Base group settings 
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(**************************************************************************************************************
   Base group - Body is never called!
***************************************************************************************************************)
;]]></ST>
    </Implementation>
    <Method Name="M_GetSubsystemStates" Id="{9ce8bcc3-3660-49cb-8ea3-a6bb9b82fb8d}">
      <Declaration><![CDATA[METHOD PROTECTED M_GetSubsystemStates 
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/14_Groups/10_Lib/10_Conv/FB_GroupConv.TcPOU $
 *
 *	Purpose			:	Get states of corresponding subsystem
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
VAR
	mIdx					: INT; // Iterator
	eElementNumber			: E_ElementNumber; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check element is initialized and has valid references
IF __ISVALIDREF(SubsystemRegistry.rSubsystemData) AND
  F_IsSubsystemInitialized() THEN
	// Return 
	GroupInterface.In.SubsystemState := SubsystemRegistry.rSubsystemData.OperationState;
ELSE
	GroupInterface.In.SubsystemState := GroupBase.OperationStateEmpty;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_InitGroup" Id="{adc4e75d-c0bd-4e2f-a56c-a7f6bce4d4ba}">
      <Declaration><![CDATA[METHOD M_InitGroup : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/14_Groups/10_Lib/10_Conv/FB_GroupConv.TcPOU $
 *
 *	Purpose			:	Initialize base functionality of group.
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
 VAR_INPUT
	 mReset		: BOOL; // Force initialization
 END_VAR
 VAR
	 mName		: T_MaxString; // Name with alpha numeric signs only
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// If the init command was an external command
IF mReset THEN
	// Inform the bottom group to initialize
	GroupData.Init := FALSE;
	// Reset values and load config
	M_PreInit();
ELSE
	// Load basic configuration to settings
	SettingsGroup := ConfigGroup;
	
	// Remove non alpha numeric signs
	mName := F_ReduceToAlphaNumeric(InputString := SettingsGroup.GroupName);

	// Update Registry reference with HashCode
	GroupRegistry[SettingsGroup.eGroupNumber].HashCode := F_CreateHashCode(mName);
	
	// Update Registry reference with name
	GroupRegistry[SettingsGroup.eGroupNumber].GroupName := SettingsGroup.GroupName;
	
	// Base group initialized
	M_InitGroup := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ITC_GCQ" Id="{b58560d1-4e7e-4502-8468-a22ab683babb}">
      <Declaration><![CDATA[METHOD PRIVATE M_ITC_GCQ : BOOL
VAR_INPUT
	meChannelSrc		: E_MFCS_CHANNEL; // Number of the source 
	mpData				: PVOID; // Data  pointer 
	mLen				: UDINT; // Data length
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Map data
F_BlockCopy(
	pSrc:= mpData, 
	LenSrc:= mLen, 
	pDest:= ADR(GroupBase.GCQ), 
	LenDest:= SIZEOF(GroupBase.GCQ));
	
// Validate control code
CASE GroupBase.GCQ.Code OF
	(*******************************************************************************
		No code
	********************************************************************************)
	E_ITC_GroupControlCode.NO_CODE:
		// No code received
		;
		
	(*******************************************************************************
		Reset error
	********************************************************************************)
	E_ITC_GroupControlCode.RESET_ERROR:
		// Reset group
		GroupData.ErrorData.Error.ResetError := TRUE;
			
	(*******************************************************************************
		Change state
	********************************************************************************)
	E_ITC_GroupControlCode.CHANGE_STATE:
		// If a command to start was received
		IF GroupBase.GCQ.Variable = 1 THEN
			// Set ITC command start
			ITC.Commands.Start := TRUE;
		
		// If a command to stop was received
		ELSIF GroupBase.GCQ.Variable = 0 THEN
			// Set ITC command stop
			ITC.Commands.Stop := TRUE;
		ELSE
			// Invalid change state received
			DebugMsg := CONCAT('M_ITC_HandleBufferMessages  - Invalid change state', DINT_TO_STRING(GroupBase.GCQ.Variable));
			fbDebugMsg.M_SendErrorMsg(mMessage := DebugMsg);
		END_IF

	(*******************************************************************************
		Change mode
	********************************************************************************)
	E_ITC_GroupControlCode.CHANGE_MODE:
		// Store command to change mode
		ITC.Commands.eMode := DINT_TO_INT(GroupBase.GCQ.Variable);
	
	(*******************************************************************************
		Set Variable
	********************************************************************************)
	E_ITC_GroupControlCode.SET_VARIABLE:
		// Store variable
		ITC.Variable := GroupBase.GCQ.Variable;
	
ELSE
	// Unrecognised ControlRequest message received 
	DebugMsg := CONCAT('M_ITC_HandleBufferMessages - Unknown control code received: ', INT_TO_STRING(GroupBase.GCQ.Code));
	fbDebugMsg.M_SendErrorMsg(mMessage := DebugMsg);
END_CASE

F_ITC_SendGCR(
	eChannelSrc	:= meChannelSrc, 
	GroupName	:= F_ReduceToAlphaNumeric(SettingsGroup.GroupName), 
	Code		:= GroupBase.GCQ.Code, 
	Variable	:= GroupBase.GCQ.Variable, 
	eReturnCode	:= E_ErrorConv.NO_ERROR_CODE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ITC_GSQ" Id="{04d795dd-5290-44fe-83d2-dac256ece3f5}">
      <Declaration><![CDATA[METHOD PRIVATE M_ITC_GSQ : BOOL
VAR_INPUT
	meChannelSrc		: E_MFCS_CHANNEL; // Number of the source 
	mpData				: PVOID; // Data  pointer 
	mLen				: UDINT; // Data length
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Map data
F_BlockCopy(
	pSrc:= mpData, 
	LenSrc:= mLen, 
	pDest:= ADR(GroupBase.GSQ), 
	LenDest:= SIZEOF(GroupBase.GSQ));

F_ITC_SendGSR(
	eChannelSrc			:= meChannelSrc, 
	GroupName			:= F_ReduceToAlphaNumeric(SettingsGroup.GroupName), 
	eMode				:= GroupData.OperationState.eMode, 
	eState				:= GroupData.OperationState.eState, 
	eErrorState			:= GroupData.ErrorData.ErrorState, 
	eErrorCode			:= GroupData.ErrorData.Error.ErrorCode.Conv, 
	eErrorType			:= GroupData.ErrorData.Error.ErrorType, 
	ErrorInformation	:= GroupData.ErrorData.Error.ErrorParam, 
	Variable			:= ITC.Variable, 
	eReturnCode			:= E_ErrorConv.NO_ERROR_CODE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ITC_ProcessMsg" Id="{33dd744b-56b5-4356-89a8-0b81cb8dc15b}">
      <Declaration><![CDATA[METHOD M_ITC_ProcessMsg : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/14_Groups/10_Lib/10_Conv/FB_GroupConv.TcPOU $
 *
 *	Purpose			:	Handle incoming group ITC messages.
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
VAR_INPUT
	meChannelSrc		: E_MFCS_CHANNEL; // Number of the source 
	mMsgType			: INT; // Message type
	mpData				: PVOID; // Data  pointer 
	mLen				: UDINT; // Data length
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Initialize ITC commands
ITC.Commands.Start 	:= FALSE;
ITC.Commands.Stop 	:= FALSE;
M_ITC_ProcessMsg := TRUE;

// Validate inputs
IF mpData > 0 AND
   mLen > 0 THEN
	// Map enum
	GroupBase.eMsgType := mMsgType;

	// Validate message type
	CASE GroupBase.eMsgType OF
		(*******************************************************************************
		  Status request message
		********************************************************************************)
		E_ITC_MsgTypeConv.GROUP_STATUS_REQUEST:
			M_ITC_GSQ(meChannelSrc := meChannelSrc, mpData := mpData, mLen := mLen);

		(*******************************************************************************
		  Control request message
		********************************************************************************)
		E_ITC_MsgTypeConv.GROUP_CONTROL_REQUEST:
			M_ITC_GCQ(meChannelSrc := meChannelSrc, mpData := mpData, mLen := mLen);
						
		(*******************************************************************************
		  Data Aquisition Request 
		********************************************************************************)
		E_ITC_MsgTypeConv.DATA_ACQUISITION_REQUEST:
			M_ITC_DAQ(meChannelSrc := meChannelSrc, mpData := mpData, mLen := mLen);
		
		(*******************************************************************************
		  Gathered Data Request 
		********************************************************************************)
		E_ITC_MsgTypeConv.GATHERED_DATA_REQUEST:
			M_ITC_GDQ(meChannelSrc := meChannelSrc, mpData := mpData, mLen := mLen);
			
		(*******************************************************************************
		  Visualization information request
		********************************************************************************)			
		E_ITC_MsgTypeConv.VISUALIZATION_INFORMATION_REQUEST:
			M_ITC_VIQ(meChannelSrc := meChannelSrc, mpData := mpData, mLen := mLen);
				

	ELSE
		// Unknown ITC message type received
		DebugMsg := CONCAT('M_ITC_HandleBufferMessages - Unknown message type received: ', INT_TO_STRING(mMsgType));
		fbDebugMsg.M_SendErrorMsg(mMessage := DebugMsg);
	END_CASE
END_IF	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ITC_ProcessOut" Id="{f1dac855-fe27-4e8a-8b22-db57abf42f20}">
      <Declaration><![CDATA[METHOD PROTECTED M_ITC_ProcessOut : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/14_Groups/10_Lib/10_Conv/FB_GroupConv.TcPOU $
 *
 *	Purpose			:	Group ITC out interface
 *						Handles internally set ITC commands.
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
VAR
	mNoError			: BOOL; // No error during processing
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
(*******************************************************************************
	Status Report 
********************************************************************************)
// If a time request request is active
IF ITC.Commands.StatusReport THEN
	
	mNoError := F_ITC_SendGSR(
					eChannelSrc			:= 0, 
					GroupName			:= F_ReduceToAlphaNumeric(SettingsGroup.GroupName), 
					eMode				:= GroupData.OperationState.eMode, 
					eState				:= GroupData.OperationState.eState, 
					eErrorState			:= GroupData.ErrorData.ErrorState, 
					eErrorCode			:= GroupData.ErrorData.Error.ErrorCode.Conv, 
					eErrorType			:= GroupData.ErrorData.Error.ErrorType, 
					ErrorInformation	:= GroupData.ErrorData.Error.ErrorParam, 
					Variable			:= ITC.Variable, 
					eReturnCode			:= E_ErrorConv.NO_ERROR_CODE);
	
	// If sending was successfull
	IF mNoError THEN
		// Reset flag
		ITC.Commands.StatusReport := FALSE;
	ELSE
		// Sending failed
		DebugMsg := 'M_ITC_ProcessOut - Forwarding status report to ITC manager failed.';
		fbDebugMsg.M_SendErrorMsg(mMessage := DebugMsg);
	END_IF
END_IF

(*******************************************************************************
	Status report: No error  
********************************************************************************)
// If a time request request is active
IF ITC.Commands.NoErrorReport THEN
	
	mNoError := F_ITC_SendGSR(
					eChannelSrc			:= 0, 
					GroupName			:= F_ReduceToAlphaNumeric(SettingsGroup.GroupName), 
					eMode				:= GroupData.OperationState.eMode, 
					eState				:= GroupData.OperationState.eState, 
					eErrorState			:= E_ErrorState.OPERATIONAL, 
					eErrorCode			:= E_ErrorConv.NO_ERROR_CODE, 
					eErrorType			:= E_ErrorType.NO_ERROR_PENDING, 
					ErrorInformation	:= '', 
					Variable			:= ITC.Variable, 
					eReturnCode			:= E_ErrorConv.NO_ERROR_CODE);
	
	// If sending was successfull
	IF mNoError THEN
		// Reset flag
		ITC.Commands.NoErrorReport := FALSE;
	ELSE
		// Sending failed
		DebugMsg := 'M_ITC_ProcessOut - Forwarding status report to ITC manager failed.';
		fbDebugMsg.M_SendErrorMsg(mMessage := DebugMsg);
	END_IF
END_IF


(*******************************************************************************
	Control Report 
********************************************************************************)
// If a control report msg request is active
IF ITC.Commands.ControlReport THEN

	mNoError := F_ITC_SendGCR(
					eChannelSrc	:= 0, 
					GroupName	:= F_ReduceToAlphaNumeric(SettingsGroup.GroupName), 
					Code		:= 0, 
					Variable	:= ITC.Variable, 
					eReturnCode	:= E_ErrorConv.NO_ERROR_CODE);

	// If sending was successfull
	IF mNoError THEN
		// Reset flag
		ITC.Commands.ControlReport := FALSE;
	ELSE
		// Sending failed
		DebugMsg := 'M_ITC_ProcessOut - Forwarding control report to ITC manager failed.';
		fbDebugMsg.M_SendErrorMsg(mMessage := DebugMsg);
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_MonitorGroupErrors" Id="{9ae4928b-e241-48de-b116-12410597779c}">
      <Declaration><![CDATA[///Monitor group errors
METHOD PROTECTED M_MonitorGroupErrors : BOOL
(**************************************************************************************
 * Application   : BoxControl Framework
 * Revision date : $Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 * Author        : CDC
 * ------------------------------------------------------------------------------------
 * © Swisslog AG * Swisslog is not liable for any usage of this source code that is not agreed
 * on between Swisslog and the other party. The mandatory legal liability remains * unaffected.
 * ------------------------------------------------------------------------------------
 * Project revision history:
 *
 * VERSION DATE         INITIALS     DESCRIPTION
 * 0.0     DD.MM.YYYY   name       	 explain customized modifications
 *
 **************************************************************************************)
VAR
	mDataSetIdx				: INT; // Temporary data set index
	mIdx					: INT; // Iterator
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
(**************************************************************************************************************
   Group error handling
***************************************************************************************************************)

// Store current data set index
mDataSetIdx := GroupData.ErrorData.DataSetIdx;

// Check if an error is stored
IF mDataSetIdx > 0 THEN
	
	// If error type has changed - its gone or type has changed
	IF GroupData.ErrorData.ErrorDataSet[mDataSetIdx].ErrorType <> 
	   GroupData.ErrorData.Error.ErrorType THEN
		
		// If the stored error type was "ERROR"
		IF GroupData.ErrorData.Error.ErrorType = E_ErrorType.ERROR
		   OR GroupData.ErrorData.Error.ErrorType = E_ErrorType.WARNING THEN
			// Send error is gone
			ITC.Commands.NoErrorReport := TRUE;
		END_IF
		
		// Reset stored data index
		GroupData.ErrorData.DataSetIdx := 0;		
				
		// Reset Message
		GroupData.ErrorData.Error.ResetError 		:= FALSE;
		GroupData.ErrorData.Error.ErrorType 		:= NO_ERROR_PENDING;
		GroupData.ErrorData.Error.ErrorCode.Conv 	:= E_ErrorConv.NO_ERROR_CODE;
		GroupData.ErrorData.Error.ErrorParam 		:= '';
	END_IF
	
// Check if an external error is stored
ELSIF GroupData.ErrorData.ExternalError.ErrorType > E_ErrorType.NO_ERROR_PENDING THEN
	// If error type has changed - its gone or type has changed
	IF GroupData.ErrorData.ExternalError.ErrorType <> 
	   GroupData.ErrorData.Error.ErrorType THEN
	   
		// If the stored error type was "ERROR"
		IF GroupData.ErrorData.Error.ErrorType = E_ErrorType.ERROR
		   OR GroupData.ErrorData.Error.ErrorType = E_ErrorType.WARNING THEN
			// Send error is gone
			ITC.Commands.NoErrorReport := TRUE;
		END_IF
		
		// Reset Message
		GroupData.ErrorData.Error.ResetError 	:= FALSE;
		GroupData.ErrorData.Error.ErrorType 	:= NO_ERROR_PENDING;
		GroupData.ErrorData.Error.ErrorCode.Conv:= E_ErrorConv.NO_ERROR_CODE;
		GroupData.ErrorData.Error.ErrorParam 	:= '';
	END_IF
END_IF
	
(**************************************************************************************************************
   Check for new or higher prioritized message
***************************************************************************************************************)
// Loop trough all errors 
FOR mIdx := 1 TO NUMBER_OF_ERROR_SETS DO
	// Detect new or higher prioritized error message
	IF GroupData.ErrorData.ErrorDataSet[mIdx].ErrorType > 
	   GroupData.ErrorData.Error.ErrorType THEN
		
		// Store index of current data set
		GroupData.ErrorData.DataSetIdx := mIdx;
		
		// Update error
		GroupData.ErrorData.Error.ErrorCode.Conv := GroupData.ErrorData.ErrorDataSet[mIdx].ErrorCode.Conv;
		GroupData.ErrorData.Error.ErrorParam := GroupData.ErrorData.ErrorDataSet[mIdx].ErrorParam;
		GroupData.ErrorData.Error.ErrorType := GroupData.ErrorData.ErrorDataSet[mIdx].ErrorType;
		
		// Send Report
		ITC.Commands.StatusReport := TRUE;
	END_IF
	
	// Check is an error is ongoing and a reset command is set
	IF GroupData.ErrorData.Error.ResetError AND 
       GroupData.ErrorData.ErrorDataSet[mIdx].ErrorType <> NO_ERROR_PENDING THEN
	   
		// Reset current error data set
		GroupData.ErrorData.ErrorDataSet[mIdx].ResetError := TRUE;
	END_IF
END_FOR

// Check external error slot
IF GroupData.ErrorData.ExternalError.ErrorType > GroupData.ErrorData.Error.ErrorType THEN

	// Reset lower prioritized previous errors
	mDataSetIdx := 0;
	
	// Update error
	GroupData.ErrorData.Error.ErrorCode.Conv := GroupData.ErrorData.ExternalError.ErrorCode.Conv;
	GroupData.ErrorData.Error.ErrorParam := GroupData.ErrorData.ExternalError.ErrorParam;
	GroupData.ErrorData.Error.ErrorType := GroupData.ErrorData.ExternalError.ErrorType;

	// Send Report
	ITC.Commands.StatusReport := TRUE;
END_IF

// Check is an external error is ongoing and a reset command is set
IF GroupData.ErrorData.Error.ResetError AND 
   GroupData.ErrorData.ExternalError.ErrorType <> NO_ERROR_PENDING THEN
   
	// Reset current error data set
	GroupData.ErrorData.ExternalError.ResetError := TRUE;
END_IF

// If reset command is set
IF GroupData.ErrorData.Error.ResetError THEN
	
	// If the stored error type was "ERROR"
	IF GroupData.ErrorData.Error.ErrorType = E_ErrorType.ERROR THEN
		// Send error is gone
		ITC.Commands.NoErrorReport := TRUE;
	END_IF
	
	// Reset stored data index
	GroupData.ErrorData.DataSetIdx := 0;	

	// Reset Message
	GroupData.ErrorData.Error.ResetError 		:= FALSE;
	GroupData.ErrorData.Error.ErrorType 		:= NO_ERROR_PENDING;
	GroupData.ErrorData.Error.ErrorCode.Conv 	:= E_ErrorConv.NO_ERROR_CODE;
	GroupData.ErrorData.Error.ErrorParam 		:= '';
END_IF

(**************************************************************************************************************
   Group error state
***************************************************************************************************************)

// If group is in error state
IF GroupData.ErrorData.Error.ErrorType = E_ErrorType.ERROR THEN
	// Set error state - ERROR
	GroupData.ErrorData.ErrorState := E_ErrorState.ERROR;
	
// If group is in warning state
ELSIF GroupData.ErrorData.Error.ErrorType = E_ErrorType.WARNING THEN
	// Set error state - WARNING
	GroupData.ErrorData.ErrorState := E_ErrorState.WARNING;

// If group has no error or an info is pending
ELSIF GroupData.ErrorData.Error.ErrorType = E_ErrorType.NO_ERROR_PENDING OR 
	  GroupData.ErrorData.Error.ErrorType = E_ErrorType.INFO  THEN
	// Set error state - Operational
	GroupData.ErrorData.ErrorState := E_ErrorState.OPERATIONAL;

ELSE
	// Otherwise -> Unknown
	GroupData.ErrorData.ErrorState := E_ErrorState.UNKNOWN;
END_IF

(**************************************************************************************************************
   Monitor elements
***************************************************************************************************************)
GroupData.ErrorData.ElementErrorPending := fbGroupManager.M_GroupMemberErrorPending(SettingsGroup.eGroupNumber);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_PreInit" Id="{8792613b-5f8a-4942-9cc4-31b3e3b698e0}">
      <Declaration><![CDATA[METHOD M_PreInit : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/14_Groups/10_Lib/10_Conv/FB_GroupConv.TcPOU $
 *
 *	Purpose			:	Preinitialize 
 *						Clears values and load settings
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(**************************************************************************************
	Load number to identify
***************************************************************************************)
SettingsGroup := ConfigGroup;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ResetError" Id="{7249d165-5862-4d5a-b796-ef3215f73836}">
      <Declaration><![CDATA[METHOD M_ResetError : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/14_Groups/10_Lib/10_Conv/FB_GroupConv.TcPOU $
 *
 *	Purpose			:	Reset group errors.
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// If the group is in error
IF GroupData.ErrorData.Error.ErrorType  <> E_ErrorType.NO_ERROR_PENDING  THEN
	// Send reset
	GroupData.ErrorData.Error.ResetError := TRUE;
END_IF

M_ResetError := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ResetExternalError" Id="{4ba5de9a-62b3-4818-851b-0c05288a4fa5}">
      <Declaration><![CDATA[METHOD M_ResetExternalError : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/14_Groups/10_Lib/10_Conv/FB_GroupConv.TcPOU $
 *
 *	Purpose			:	Reset external error
 *						
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
 VAR_INPUT
	mReset		: BOOL; // Force reset
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Initialize
M_ResetExternalError := FALSE;

// Reset error if ResetError command or reset command is set 
IF GroupData.ErrorData.ExternalError.ResetError OR mReset THEN
	// Clear error
	GroupData.ErrorData.ExternalError.ResetError 		:= FALSE; 
	GroupData.ErrorData.ExternalError.ErrorType 		:= NO_ERROR_PENDING;
	GroupData.ErrorData.ExternalError.ErrorCode.Conv	:= E_ErrorConv.NO_ERROR_CODE;
	GroupData.ErrorData.ExternalError.ErrorParam 		:= '';
	M_ResetExternalError 								:= TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetExternalError" Id="{15939c3c-6d66-41ce-aa27-510afa7ac7c9}">
      <Declaration><![CDATA[METHOD M_SetExternalError : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/14_Groups/10_Lib/10_Conv/FB_GroupConv.TcPOU $
 *
 *	Purpose			:	Set error
 *						Wrapped to a function to improve debugging and readability.
 *						
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
 VAR_INPUT
	mErrorType		: E_ErrorType; // Error message type
	mErrorParam		: STRING(System.ERROR_PARAM_STRINGLENGTH); // Error parameter
	mErrorCode		: INT; // Error message
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Initialize
M_SetExternalError := FALSE;

// Check that the values are valid
IF mErrorType > E_ErrorType.NO_ERROR_PENDING AND mErrorCode > E_ErrorConv.NO_ERROR_CODE THEN

	GroupData.ErrorData.ExternalError.ErrorCode.Conv := mErrorCode;
	GroupData.ErrorData.ExternalError.ErrorType := mErrorType;
	GroupData.ErrorData.ExternalError.ErrorParam := mErrorParam;

	M_SetExternalError := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_UpdateRegistry" Id="{c7115969-1729-4294-b4a9-0963dd417f53}">
      <Declaration><![CDATA[METHOD M_UpdateRegistry
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/14_Groups/10_Lib/10_Conv/FB_GroupConv.TcPOU $
 *
 *	Purpose			:	Update registry information
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
VAR_INPUT
END_VAR
VAR
	mIdx	: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF ConfigGroup.eGroupNumber > E_GroupNumber.G_BEGIN_GROUP THEN

	GroupRegistry[ConfigGroup.eGroupNumber].rGroupData REF= GroupData;
	GroupRegistry[ConfigGroup.eGroupNumber].rGroupInterface REF= GroupInterface;
	GroupRegistry[ConfigGroup.eGroupNumber].rSettingsGroup REF= SettingsGroup;
END_IF]]></ST>
      </Implementation>
    </Method>
    <ObjectProperties>
      <XmlArchive>
        <Data>
          <o xml:space="preserve" t="UMLStereoTypeContainerObject">
            <v n="IsType" t="UMLType">BaseArea</v>
            <v n="Stereotype">""</v>
            <d n="Stereotypes" t="Hashtable" />
          </o>
        </Data>
        <TypeList>
          <Type n="Hashtable">System.Collections.Hashtable</Type>
          <Type n="String">System.String</Type>
          <Type n="UMLStereoTypeContainerObject">{30250973-b110-4e31-b562-c102e042dca4}</Type>
          <Type n="UMLType">{0197b136-405a-42ee-bb27-fd08b621d0cf}</Type>
        </TypeList>
      </XmlArchive>
    </ObjectProperties>
    <LineIds Name="FB_GroupConv">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GroupConv.M_GetSubsystemStates">
      <LineId Id="3" Count="8" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GroupConv.M_InitGroup">
      <LineId Id="3" Count="22" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GroupConv.M_ITC_GCQ">
      <LineId Id="3" Count="66" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GroupConv.M_ITC_GSQ">
      <LineId Id="3" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GroupConv.M_ITC_ProcessMsg">
      <LineId Id="3" Count="50" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GroupConv.M_ITC_ProcessOut">
      <LineId Id="3" Count="81" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GroupConv.M_MonitorGroupErrors">
      <LineId Id="3" Count="153" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GroupConv.M_PreInit">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GroupConv.M_ResetError">
      <LineId Id="3" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GroupConv.M_ResetExternalError">
      <LineId Id="3" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GroupConv.M_SetExternalError">
      <LineId Id="3" Count="10" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GroupConv.M_UpdateRegistry">
      <LineId Id="3" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
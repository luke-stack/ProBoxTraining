<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="F_DeleteTU_Data" Id="{46f85dd0-ca37-4da3-b9e8-3128e727c3b1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION F_DeleteTU_Data : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2018-04-23 08:21:38 +0200 (Mo., 23 Apr 2018) $
 *	Last changed by	:	$Author: d7mangc $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/10_Base/10_Lib/10_Conv/F_DeleteTU_Data.TcPOU $
 *
 *	Purpose			:	Deleting TU-Data. 
 *						Return True - Deleting was successfull
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * VERSION DATE         INITIALS     DESCRIPTION
 * 0.0     DD.MM.YYYY   (name)       (explain customized modifications) *
 *
 **************************************************************************************)
VAR_INPUT
	TU_DataIndex				: DINT; // TU data index
	NoTTC						: BOOL; // No TTC will be sent, used for external destinations
END_VAR

VAR
	FunctionNumberOfTU_Data		: ST_PositionIdent; // Function data
	LastKnownFunctionName		: STRING(System.NAME_LENGTH); // Postion
	eFunctionNumber  			: E_FunctionNumber; // Iterator
	ZoneNumber					: INT; // Zone iterator
	IndexDeleted				: BOOL; // Deleted
	IndexWasFoundonPosition		: BOOL; // Index was found on a position
	DebugMsg					: T_MAXSTRING; // Debug msg
	TTC							: ST_ITC_TTC; // TTC
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Initialize
F_DeleteTU_Data := FALSE;
IndexWasFoundonPosition := FALSE;
FunctionNumberOfTU_Data.eFunctionNumber := F_BEGIN_FUNCTION;
FunctionNumberOfTU_Data.ZoneNumber := 0;

// Delete TU data only if index is valid 
IF TU_DataIndex > 0 THEN
	// Loop through all elements 
	FOR eFunctionNumber := F_BEGIN_FUNCTION + 1 TO F_END_FUNCTION - 1 BY 1 DO
		// Search FunctionNumber and ZoneIndex belonging to the TU_DataIndex 
		FunctionNumberOfTU_Data := F_SearchPositionOfTU_Index(
										TU_DataIndex 		 := TU_DataIndex, 
										eStartFunctionNumber := FunctionNumberOfTU_Data.eFunctionNumber);
		
		// Delete TU-DataIndex if it is used by a position
		IF FunctionNumberOfTU_Data.eFunctionNumber > E_FunctionNumber.F_BEGIN_FUNCTION THEN
			// Reference valid
			IF __ISVALIDREF(FunctionRegistry[FunctionNumberOfTU_Data.eFunctionNumber].rFunction) THEN
				// Remeber TU index was found on a position (For reporting)
				IndexWasFoundonPosition := TRUE;

				// Forward delete command to the function (Zone = 0) and all zones (Zone > 0)
				FOR ZoneNumber := 0 TO FunctionRegistry[FunctionNumberOfTU_Data.eFunctionNumber].rSettingsFunction.NumberOfZones DO
					// If a TU index should be deleted on a position an init command is not needed for that
					// Otherwise it is possible that we delete during a transport an Index, and after the init we delete a new index as well
					IndexDeleted := FunctionRegistry[FunctionNumberOfTU_Data.eFunctionNumber].rFunction.M_DeleteTU_DataIndex(
										mZoneNumber 	:= ZoneNumber,
										mTU_DataIndex 	:= TU_DataIndex,
										mInit			:= FALSE);
										
					// Delete executed, report it
					IF IndexDeleted THEN
						LastKnownFunctionName := F_GetFunctionName(eFunctionNumber:= FunctionNumberOfTU_Data.eFunctionNumber,
																	ZoneNumber	  := ZoneNumber);
						//-- debug message ------------------------------------------------
						// example: '11-001-1979-01-9,  TU_DataIndex deleted,  TU_DataIndex = 1979,  TuID = 0012345600,  AssignmentID = 19790109'
						DebugMsg:= '';
						DebugMsg:= CONCAT(DebugMsg, F_AddDividerToSisString(LastKnownFunctionName));
						DebugMsg:= CONCAT(DebugMsg, ',  TU_DataIndex deleted');
						DebugMsg:= CONCAT(DebugMsg, F_CreateTU_DataString(TU_DataIndex));
						fbDebugMsgManager.M_SendMessage(meMessageType:= E_DebugMsgType.INFO,
														mDebugSource := 'F_DeleteTU_Data', 
														mpMsgData    := ADR(DebugMsg),
														mMsgDataLen  := INT_TO_UDINT(LEN(DebugMsg)));
						
						// If the assignement is active notify the MFCS about the deletion 
						IF TU_DataTable[TU_DataIndex].DataSet.JobPresent AND NOT NoTTC THEN
							// Insert current position
							TTC.Position := F_ReduceToAlphaNumeric(
												InputString := FunctionRegistry[FunctionNumberOfTU_Data.eFunctionNumber].Zone[ZoneNumber].ZoneName); 					
							
							// If no position is existing take the last known position from the TU data
							IF TTC.Position = '' THEN
								TTC.Position := F_GetFunctionName(
														eFunctionNumber := TU_DataTable[TU_DataIndex].TimeStamp.eInsertFunctionNumber,
														ZoneNumber		:= TU_DataTable[TU_DataIndex].TimeStamp.InsertZoneNumber);

								// If still no position is existing take the subsystem name instead
								IF TTC.Position = '' THEN
									TTC.Position := F_ReduceToAlphaNumeric(
														InputString :=Registry.SubsystemRegistry.SubsystemName);
								END_IF	
							END_IF

							TTC.TU_DataIndex := TU_DataIndex;
							TTC.MsgSequence := 0;
							TTC.TU_ID :=  TU_DataTable[TU_DataIndex].TU_ID.ASCII;
							TTC.AssignmentID :=  TU_DataTable[TU_DataIndex].AssignmentID;
							TTC.ReturnCode := E_ErrorConv.DESTINATION_NOT_REACHABLE;
						
							System.fbITC_Manager.M_SendData(
								meChannel := 0, 
								mMsgType  := E_ITC_MsgTypeConv.TRANSPORT_TASK_COMPLETE, 
								mpData    := ADR(TTC),
								mLen	  := SIZEOF(TTC));
						END_IF
					END_IF
				END_FOR
			END_IF
		ELSE
			EXIT;
		END_IF
	END_FOR

	// If the index is not found on a position
	IF NOT IndexWasFoundonPosition THEN
		LastKnownFunctionName := F_GetFunctionName(
								eFunctionNumber := TU_DataTable[TU_DataIndex].TimeStamp.eInsertFunctionNumber,
								ZoneNumber		:= TU_DataTable[TU_DataIndex].TimeStamp.InsertZoneNumber);
		//-- debug message ------------------------------------------------
		// example: '11-001-1979-01-9,  TU_DataIndex deleted,  TU_DataIndex = 1979,  TuID = 0012345600,  AssignmentID = 19790109'
		DebugMsg:= '';
		DebugMsg:= CONCAT(DebugMsg, F_AddDividerToSisString(LastKnownFunctionName));
		DebugMsg:= CONCAT(DebugMsg, 'TU_DataIndex deleted');
		DebugMsg:= CONCAT(DebugMsg, F_CreateTU_DataString(TU_DataIndex));
		fbDebugMsgManager.M_SendMessage(meMessageType:= E_DebugMsgType.INFO,
										mDebugSource := 'F_DeleteTU_Data', 
										mpMsgData    := ADR(DebugMsg),
										mMsgDataLen  := INT_TO_UDINT(LEN(DebugMsg)));

		// If the assignement is active notify the MFCS about the deletion
		IF TU_DataTable[TU_DataIndex].DataSet.JobPresent AND NOT NoTTC THEN
			// Use the last known position from the TU data
			TTC.Position := F_ReduceToAlphaNumeric(
								InputString := LastKnownFunctionName);

			// If no position is existing take the subsystem name instead
			IF TTC.Position = '' THEN
				TTC.Position := F_ReduceToAlphaNumeric(
									InputString := Registry.SubsystemRegistry.SubsystemName);
			END_IF		

			TTC.TU_DataIndex := TU_DataIndex;
			TTC.MsgSequence := 0;
			TTC.TU_ID :=  TU_DataTable[TU_DataIndex].TU_ID.ASCII;
			TTC.AssignmentID :=  TU_DataTable[TU_DataIndex].AssignmentID;
			TTC.ReturnCode := E_ErrorConv.DESTINATION_NOT_REACHABLE;
		
			System.fbITC_Manager.M_SendData(
				meChannel := 0, 
				mMsgType  := E_ITC_MsgTypeConv.TRANSPORT_TASK_COMPLETE, 
				mpData    := ADR(TTC),
				mLen	  := SIZEOF(TTC));
		END_IF
	END_IF
	
	// Delete TU_Data set in table
	MEMSET(ADR(TU_DataTable[TU_DataIndex]), fillByte := 0, SIZEOF(TU_DataTable[TU_DataIndex]));
	// Delete successful
	F_DeleteTU_Data := TRUE;
END_IF]]></ST>
    </Implementation>
    <ObjectProperties>
      <XmlArchive>
        <Data>
          <o xml:space="preserve" t="UMLStereoTypeContainerObject">
            <v n="IsType" t="UMLType">BaseArea</v>
            <v n="Stereotype">""</v>
            <d n="Stereotypes" t="Hashtable" />
          </o>
        </Data>
        <TypeList>
          <Type n="Hashtable">System.Collections.Hashtable</Type>
          <Type n="String">System.String</Type>
          <Type n="UMLStereoTypeContainerObject">{30250973-b110-4e31-b562-c102e042dca4}</Type>
          <Type n="UMLType">{0197b136-405a-42ee-bb27-fd08b621d0cf}</Type>
        </TypeList>
      </XmlArchive>
    </ObjectProperties>
  </POU>
</TcPlcObject>
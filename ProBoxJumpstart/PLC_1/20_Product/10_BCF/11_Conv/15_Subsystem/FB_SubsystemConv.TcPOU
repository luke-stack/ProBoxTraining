<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_SubsystemConv" Id="{5522264e-d723-4986-b1d8-a0d833431293}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SubsystemConv EXTENDS FB_BaseObject
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/15_Subsystem/10_Lib/10_Conv/FB_SubsystemConv.TcPOU $
 *
 *	Purpose			:	Main subsystem
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
VAR_INPUT
	ConfigSubsystem				: ST_CFG_Subsystem; // Configuration 
END_VAR

VAR
	SubsystemBase				: ST_SubsystemBase; // Subsystem base	
END_VAR

VAR PERSISTENT
	ITC							: ST_ITC_Subsystem; // Internal ITC
	SubsystemData				: ST_SubsystemData; // Subsystem data
	SubsystemInterface			: ST_SubsystemInterface; // Interface to the Subsystem 
	SettingsSubsystem			: ST_CFG_Subsystem; // Settings
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(**************************************************************************************************************
   Base Subsystem - Body is never called!
***************************************************************************************************************)
;]]></ST>
    </Implementation>
    <Method Name="M_InitControl" Id="{58982d7e-3c6d-4042-ad07-c63f8ba94a4f}">
      <Declaration><![CDATA[METHOD M_InitControl : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/15_Subsystem/10_Lib/10_Conv/FB_SubsystemConv.TcPOU $
 *
 *	Purpose			:	Control initialization sequence
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)

]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// If groupwise initialization is enabled
IF SettingsSubsystem.MaxInitCallsPerCycle <> 0 THEN
	// If the subsystem is started
	IF SubsystemData.OperationState.eState = E_PositionState.STARTED THEN
		(*
		In order to control the PLC load due to initialization, 
		all positions will be initialized in groups.
		
		Order:
			1. Group
			2. Element
			3. Function
		*)
		IF SubsystemBase.eLimitGroupNumber < E_GroupNumber.G_END_GROUP THEN
		
			IF SubsystemBase.eLimitGroupNumber + SettingsSubsystem.MaxInitCallsPerCycle > E_GroupNumber.G_END_GROUP THEN
				SubsystemBase.eLimitGroupNumber := E_GroupNumber.G_END_GROUP;
				SubsystemData.OperationState.InitRelease.eLimitGroup := E_GroupNumber.G_END_GROUP;
			ELSE
				SubsystemBase.eLimitGroupNumber :=  SubsystemBase.eLimitGroupNumber + SettingsSubsystem.MaxInitCallsPerCycle;
				SubsystemData.OperationState.InitRelease.eLimitGroup := SubsystemBase.eLimitGroupNumber;
			END_IF
		ELSIF SubsystemBase.eLimitElementNumber < E_ElementNumber.E_END_ELEMENT THEN
		
			IF SubsystemBase.eLimitElementNumber + SettingsSubsystem.MaxInitCallsPerCycle > E_ElementNumber.E_END_ELEMENT THEN
				SubsystemBase.eLimitElementNumber := E_ElementNumber.E_END_ELEMENT;
				SubsystemData.OperationState.InitRelease.eLimitElementNumber := SubsystemBase.eLimitElementNumber;
			ELSE
				SubsystemBase.eLimitElementNumber :=  SubsystemBase.eLimitElementNumber + SettingsSubsystem.MaxInitCallsPerCycle;
				SubsystemData.OperationState.InitRelease.eLimitElementNumber := SubsystemBase.eLimitElementNumber;
			END_IF
		ELSIF SubsystemBase.eLimitFunctionNumber < E_FunctionNumber.F_END_FUNCTION THEN
		
			IF SubsystemBase.eLimitFunctionNumber + SettingsSubsystem.MaxInitCallsPerCycle > E_FunctionNumber.F_END_FUNCTION THEN
				SubsystemBase.eLimitFunctionNumber := E_FunctionNumber.F_END_FUNCTION;
				SubsystemData.OperationState.InitRelease.eLimitFunctionNumber := SubsystemBase.eLimitFunctionNumber;
			ELSE
				SubsystemBase.eLimitFunctionNumber :=  SubsystemBase.eLimitFunctionNumber + SettingsSubsystem.MaxInitCallsPerCycle;
				SubsystemData.OperationState.InitRelease.eLimitFunctionNumber := SubsystemBase.eLimitFunctionNumber;
			END_IF
		END_IF
	ELSE
		SubsystemBase.eLimitFunctionNumber := E_FunctionNumber.F_BEGIN_FUNCTION;
		SubsystemBase.eLimitElementNumber := E_ElementNumber.E_BEGIN_ELEMENT;
		SubsystemBase.eLimitGroupNumber := E_GroupNumber.G_BEGIN_GROUP;
	END_IF
ELSE
	SubsystemBase.eLimitFunctionNumber := E_FunctionNumber.F_END_FUNCTION;
	SubsystemBase.eLimitElementNumber := E_ElementNumber.E_END_ELEMENT;
	SubsystemBase.eLimitGroupNumber := E_GroupNumber.G_END_GROUP;
	SubsystemData.OperationState.InitRelease.eLimitGroup := SubsystemBase.eLimitGroupNumber;
	SubsystemData.OperationState.InitRelease.eLimitElementNumber := SubsystemBase.eLimitElementNumber;
	SubsystemData.OperationState.InitRelease.eLimitFunctionNumber := SubsystemBase.eLimitFunctionNumber;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_InitSubsystem" Id="{7a63b446-041c-462d-b8f2-c8987b2acdf9}">
      <Declaration><![CDATA[METHOD M_InitSubsystem : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/15_Subsystem/10_Lib/10_Conv/FB_SubsystemConv.TcPOU $
 *
 *	Purpose			:	Initialize SubSystem
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
  VAR_INPUT
	 mReset		: BOOL; // Force initialization
 END_VAR
 VAR
	 mName		: T_MaxString; // Name with alpha numeric signs only
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// If the init command was an external command
IF mReset THEN
	// Inform the bottom subsystem to initialize
	SubSystemData.Init := FALSE;
	// Reset values and load config
	M_PreInit();
ELSE
	// Load basic configuration to settings
	SettingsSubsystem := ConfigSubsystem;
	
	// Remove non alpha numeric signs
	mName := F_ReduceToAlphaNumeric(InputString := SettingsSubsystem.SubsystemName);

	// Update Registry reference with HashCode
	SubsystemRegistry.HashCode := F_CreateHashCode(mName);
	
	// Update Registry reference with name
	SubsystemRegistry.SubsystemName := SettingsSubsystem.SubsystemName;
	
	// Base subsystem initialized
	M_InitSubsystem := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ITC_ProcessMsg" Id="{b7f06bf1-9af2-4022-9e03-07884a0790c7}">
      <Declaration><![CDATA[METHOD M_ITC_ProcessMsg : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/15_Subsystem/10_Lib/10_Conv/FB_SubsystemConv.TcPOU $
 *
 *	Purpose			:	Handle incoming group ITC messages.
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
VAR_INPUT
	meChannelSrc		: E_MFCS_CHANNEL; // Number of the source 
	mMsgType			: INT; // Message type
	mpData				: PVOID; // Data  pointer 
	mLen				: UDINT; // Data length
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Initialize
M_ITC_ProcessMsg := TRUE;

// Validate inputs
IF mpData > 0 AND
   mLen > 0 THEN
	// Map enum
	SubsystemBase.eMsgType := mMsgType;

	// Validate message type
	CASE SubsystemBase.eMsgType OF
		(*******************************************************************************
		  Status request message
		********************************************************************************)
		E_ITC_MsgTypeConv.SUBSYSTEM_STATUS_REQUEST:		
			M_ITC_SSQ(meChannelSrc := meChannelSrc, mpData := mpData, mLen := mLen);
			
		(*******************************************************************************
		  Control request message
		********************************************************************************)
		E_ITC_MsgTypeConv.SUBSYSTEM_CONTROL_REQUEST:
			M_ITC_SCQ(meChannelSrc := meChannelSrc, mpData := mpData, mLen := mLen);

						
		(*******************************************************************************
		  Data Aquisition Request 
		********************************************************************************)
		E_ITC_MsgTypeConv.DATA_ACQUISITION_REQUEST:
			M_ITC_DAQ(meChannelSrc := meChannelSrc, mpData := mpData, mLen := mLen);
		(*******************************************************************************
		  Gathered Data Request 
		********************************************************************************)
		E_ITC_MsgTypeConv.GATHERED_DATA_REQUEST:
			M_ITC_GDQ(meChannelSrc := meChannelSrc, mpData := mpData, mLen := mLen);
			
		(*******************************************************************************
		  Visualization information request
		********************************************************************************)			
		E_ITC_MsgTypeConv.VISUALIZATION_INFORMATION_REQUEST:
			M_ITC_VIQ(meChannelSrc := meChannelSrc, mpData := mpData, mLen := mLen);
				

	ELSE
		// Unknown ITC message type received
		DebugMsg := CONCAT('M_ITC_HandleBufferMessages - Unknown message type received: ', INT_TO_STRING(mMsgType));
		fbDebugMsg.M_SendErrorMsg(mMessage := DebugMsg);
	END_CASE
END_IF	
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ITC_ProcessOut" Id="{2a2ae4ca-9656-4e9c-919b-0c3d4b505c9c}">
      <Declaration><![CDATA[METHOD M_ITC_ProcessOut : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/15_Subsystem/10_Lib/10_Conv/FB_SubsystemConv.TcPOU $
 *
 *	Purpose			:	Subsystem ITC out interface
 *						Handles internally set ITC commands.
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
VAR
	mErrorData	 		: ST_SubsystemErrorStruct; // Error data
	mNoError			: BOOL; // No error during processing
	mSSR				: ST_ITC_SSR; // ITC struct
	mSCR				: ST_ITC_SCR; // ITC struct
	mNumberOfZones		: INT; // Number of zones
	mZoneIdx			: INT; // Zone index
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
(*******************************************************************************
	Status Report : System restart
********************************************************************************)
// If a system restart info request is active
IF ITC.Commands.SystemRestartInfo THEN
	// Get error data
	mErrorData := SubsystemData.ErrorData;
	
	mNoError := F_ITC_SendSSR(
					eChannelSrc		:= 0, 
					SubsystemName	:= F_ReduceToAlphaNumeric(SettingsSubsystem.SubsystemName), 
					eMode			:= SubsystemData.OperationState.eMode, 
					eState			:= SubsystemData.OperationState.eState, 
					eSystemInfo		:= E_SystemInfo.RESTARTED, 
					eErrorState		:= mErrorData.ErrorState, 
					eErrorCode		:= mErrorData.Error.ErrorCode.Conv, 
					eErrorType		:= mErrorData.Error.ErrorType, 
					ErrorInformation:= mErrorData.Error.ErrorParam, 
					Variable		:= ITC.Variable, 
					eReturnCode		:= E_ErrorConv.NO_ERROR_CODE);

	// If sending was successfull
	IF mNoError THEN
		// Reset flag
		ITC.Commands.SystemRestartInfo := FALSE;
	ELSE
		// Sending failed
		DebugMsg := 'M_ITC_ProcessOut - Forwarding system restart to ITC manager failed.';
		fbDebugMsg.M_SendErrorMsg(mMessage := DebugMsg);
	END_IF
END_IF

(*******************************************************************************
	Status Report : No error
********************************************************************************)
// If an error is gone, send status report
IF ITC.Commands.NoErrorReport THEN

	// Get error data
	mErrorData := SubsystemData.ErrorData;
	
	mNoError := F_ITC_SendSSR(
					eChannelSrc		:= 0, 
					SubsystemName	:= F_ReduceToAlphaNumeric(SettingsSubsystem.SubsystemName), 
					eMode			:= SubsystemData.OperationState.eMode, 
					eState			:= SubsystemData.OperationState.eState, 
					eSystemInfo		:= E_SystemInfo.NO_INFO, 
					eErrorState		:= E_ErrorState.OPERATIONAL, 
					eErrorCode		:= E_ErrorConv.NO_ERROR_CODE, 
					eErrorType		:= E_ErrorType.NO_ERROR_PENDING, 
					ErrorInformation:= '', 
					Variable		:= ITC.Variable, 
					eReturnCode		:= E_ErrorConv.NO_ERROR_CODE);

	// If sending was successfull
	IF mNoError THEN
		// Reset flag
		ITC.Commands.NoErrorReport := FALSE;
	ELSE
		// Sending failed
		DebugMsg := 'M_ITC_ProcessOut - Forwarding "No error" status report to ITC manager failed.';
		fbDebugMsg.M_SendErrorMsg(mMessage := DebugMsg);
	END_IF
END_IF

(*******************************************************************************
	Status Report : Time request
********************************************************************************)
// If a system restart info request is active
IF ITC.Commands.RequestTimeUpdate THEN

	// Get error data
	mErrorData := SubsystemData.ErrorData;
	
	mNoError := F_ITC_SendSSR(
					eChannelSrc		:= 0, 
					SubsystemName	:= F_ReduceToAlphaNumeric(SettingsSubsystem.SubsystemName), 
					eMode			:= SubsystemData.OperationState.eMode, 
					eState			:= SubsystemData.OperationState.eState, 
					eSystemInfo		:= E_SystemInfo.TIME_UPDATE_REQUIRED, 
					eErrorState		:= mErrorData.ErrorState, 
					eErrorCode		:= mErrorData.Error.ErrorCode.Conv, 
					eErrorType		:= mErrorData.Error.ErrorType, 
					ErrorInformation:= mErrorData.Error.ErrorParam, 
					Variable		:= ITC.Variable, 
					eReturnCode		:= E_ErrorConv.NO_ERROR_CODE);
					
					
	// If sending was successfull
	IF mNoError THEN
		// Reset flag
		ITC.Commands.RequestTimeUpdate := FALSE;
	ELSE
		// Sending failed
		DebugMsg := 'M_ITC_ProcessOut - Forwarding request time update to ITC manager failed.';
		fbDebugMsg.M_SendErrorMsg(mMessage := DebugMsg);
	END_IF
END_IF

(*******************************************************************************
	Status Report 
********************************************************************************)
// If a time request request is active
IF ITC.Commands.StatusReport THEN

	// Get error data
	mErrorData := SubsystemData.ErrorData;

	mNoError := F_ITC_SendSSR(
					eChannelSrc		:= 0, 
					SubsystemName	:= F_ReduceToAlphaNumeric(SettingsSubsystem.SubsystemName), 
					eMode			:= SubsystemData.OperationState.eMode, 
					eState			:= SubsystemData.OperationState.eState, 
					eSystemInfo		:= E_SystemInfo.NO_INFO, 
					eErrorState		:= mErrorData.ErrorState, 
					eErrorCode		:= mErrorData.Error.ErrorCode.Conv, 
					eErrorType		:= mErrorData.Error.ErrorType, 
					ErrorInformation:= mErrorData.Error.ErrorParam, 
					Variable		:= ITC.Variable, 
					eReturnCode		:= E_ErrorConv.NO_ERROR_CODE);

	// If sending was successfull
	IF mNoError THEN
		// Reset flag
		ITC.Commands.StatusReport := FALSE;
	ELSE
		// Sending failed
		DebugMsg := 'M_ITC_ProcessOut - Forwarding status report to ITC manager failed.';
		fbDebugMsg.M_SendErrorMsg(mMessage := DebugMsg);
	END_IF
END_IF

(*******************************************************************************
	Control Report 
********************************************************************************)
// If a control report msg request is active
IF ITC.Commands.ControlReport THEN

	mNoError := F_ITC_SendSCR(
					eChannelSrc		:= 0, 
					SubsystemName	:= F_ReduceToAlphaNumeric(SettingsSubsystem.SubsystemName), 
					Code			:= 0, 
					Variable		:= ITC.Variable, 
					eReturnCode		:= E_ErrorConv.NO_ERROR_CODE);

	// If sending was successfull
	IF mNoError THEN
		// Reset flag
		ITC.Commands.ControlReport := FALSE;
	ELSE
		// Sending failed
		DebugMsg := 'M_ITC_ProcessOut - Forwarding control report to ITC manager failed.';
		fbDebugMsg.M_SendErrorMsg(mMessage := DebugMsg);
	END_IF
END_IF

(*******************************************************************************
	Command to send update of the whole system
********************************************************************************)
// If a Update all group and postion msg request is active
IF ITC.Commands.UpdateAllGroupsAndPositions THEN
	(*
	A full system update needs a lot of system ressources, 
	therefore the request is separated in several cycles instead
	of sending all telegrams in one cycle.
	*)

	// Forward request to all groups in the registry
	IF SubsystemBase.eUpdateGroupNumber > E_GroupNumber.G_BEGIN_GROUP  AND 
	   SubsystemBase.eUpdateGroupNumber < E_GroupNumber.G_END_GROUP THEN
		// Forward request
		SubsystemBase.GSQ.Position := F_ReduceToAlphaNumeric(GroupRegistry[SubsystemBase.eUpdateGroupNumber].GroupName);

		System.fbITC_Manager.M_AddData(
			meChannelSrc := SubsystemBase.UpdateChannelSrc,
			mMsgType 	 := E_ITC_MsgTypeConv.GROUP_STATUS_REQUEST,
			mpData		 := ADR(SubsystemBase.GSQ),
			mLen		 := SIZEOF(SubsystemBase.GSQ));
		
		// Increment index or terminate sending group status	
		IF SubsystemBase.eUpdateGroupNumber < E_GroupNumber.G_END_GROUP THEN 
			SubsystemBase.eUpdateGroupNumber := SubsystemBase.eUpdateGroupNumber + 1;
		END_IF	
	ELSE
		SubsystemBase.UpdateGroupDone := TRUE;
	END_IF
	
	// Forward request to all elements in the registry
	IF SubsystemBase.eUpdateElementNumber > E_ElementNumber.E_BEGIN_ELEMENT  AND 
	   SubsystemBase.eUpdateElementNumber < E_ElementNumber.E_END_ELEMENT THEN	
		// Forward request
		SubsystemBase.ESQ.Position := F_ReduceToAlphaNumeric(ElementRegistry[SubsystemBase.eUpdateElementNumber].ElementName);
		
		System.fbITC_Manager.M_AddData(
			meChannelSrc := SubsystemBase.UpdateChannelSrc,
			mMsgType 	 := E_ITC_MsgTypeConv.Element_STATUS_REQUEST,
			mpData		 := ADR(SubsystemBase.ESQ),
			mLen		 := SIZEOF(SubsystemBase.ESQ));
			
		// Increment index or terminate sending element status
		IF SubsystemBase.eUpdateElementNumber < E_ElementNumber.E_END_ELEMENT THEN 
			SubsystemBase.eUpdateElementNumber := SubsystemBase.eUpdateElementNumber + 1;
		END_IF			
	ELSE
		SubsystemBase.UpdateElementDone := TRUE;
	END_IF
	
	// Forward request to all functions and zones in the registry
	IF SubsystemBase.eUpdateFunctionNumber > E_FunctionNumber.F_BEGIN_FUNCTION  AND 
	   SubsystemBase.eUpdateFunctionNumber < E_FunctionNumber.F_END_FUNCTION THEN	
		// Forward request
		SubsystemBase.FSQ.Position := F_ReduceToAlphaNumeric(FunctionRegistry[SubsystemBase.eUpdateFunctionNumber].FunctionName);

		System.fbITC_Manager.M_AddData(
			meChannelSrc := SubsystemBase.UpdateChannelSrc,
			mMsgType 	 := E_ITC_MsgTypeConv.FUNCTION_STATUS_REQUEST,
			mpData		 := ADR(SubsystemBase.FSQ),
			mLen		 := SIZEOF(SubsystemBase.FSQ));
	
		// Get function settings
		mNumberOfZones := F_GetNumberOfZones(eFunctionNumber := SubsystemBase.eUpdateFunctionNumber);

		// Go through all configured zones
		FOR mZoneIdx := 1 TO mNumberOfZones DO
			SubsystemBase.FSQ.Position := F_ReduceToAlphaNumeric(FunctionRegistry[SubsystemBase.eUpdateFunctionNumber].Zone[mZoneIdx].ZoneName);
			
			System.fbITC_Manager.M_AddData(
				meChannelSrc := SubsystemBase.UpdateChannelSrc,
				mMsgType 	 := E_ITC_MsgTypeConv.FUNCTION_STATUS_REQUEST,
				mpData		 := ADR(SubsystemBase.FSQ),
				mlen		 := SIZEOF(SubsystemBase.FSQ));
		END_FOR
		// Increment index or terminate function status
		IF SubsystemBase.eUpdateFunctionNumber < E_FunctionNumber.F_END_FUNCTION THEN 
			SubsystemBase.eUpdateFunctionNumber := SubsystemBase.eUpdateFunctionNumber + 1;
		END_IF			
	ELSE
		SubsystemBase.UpdateFunctionDone := TRUE;		
	END_IF

	// If all status are reported 
	IF SubsystemBase.UpdateGroupDone AND 
	   SubsystemBase.UpdateElementDone AND 
       SubsystemBase.UpdateFunctionDone THEN
		// Terminate reporting
		SubsystemBase.UpdateGroupDone := FALSE;
		SubsystemBase.UpdateElementDone := FALSE;
		SubsystemBase.UpdateFunctionDone := FALSE;		
		ITC.Commands.UpdateAllGroupsAndPositions := FALSE;
	END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ITC_SCQ" Id="{4b3146e3-b4f9-4c16-b9f4-1fd4a41e039d}">
      <Declaration><![CDATA[METHOD PRIVATE M_ITC_SCQ : BOOL
VAR_INPUT
	meChannelSrc		: E_MFCS_CHANNEL; // Number of the source 
	mpData				: PVOID; // Data  pointer 
	mLen				: UDINT; // Data length
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Map data
F_BlockCopy(
	pSrc:= mpData, 
	LenSrc:= mLen, 
	pDest:= ADR(SubsystemBase.SCQ), 
	LenDest:= SIZEOF(SubsystemBase.SCQ));
	
// Validate control code
CASE SubsystemBase.SCQ.Code OF
	(*******************************************************************************
		No code
	********************************************************************************)
	E_ITC_SubsystemControlCode.NO_CODE:
		// No code received
		;
		
	(*******************************************************************************
		Reset error
	********************************************************************************)
	E_ITC_SubsystemControlCode.RESET_ERROR:
		// Reset Subsystem
		SubsystemData.ErrorData.Error.ResetError := TRUE;
			
	(*******************************************************************************
		Set Variable
	********************************************************************************)
	E_ITC_SubsystemControlCode.SET_VARIABLE:
		// Store variable
		ITC.Variable := SubsystemBase.SCQ.Variable;

	(*******************************************************************************
		Set Master speed request
	********************************************************************************)
	E_ITC_SubsystemControlCode.SET_MASTER_SPEED:
	
		// Check max limit master speed
		IF SubsystemBase.SCQ.Variable > SettingsSubsystem.MaxMasterSpeed THEN
			// Limit master speed
			SubsystemInterface.In.MasterSpeed := SettingsSubsystem.MaxMasterSpeed;
			
		// Check min limit master speed
		ELSIF SubsystemBase.SCQ.Variable < SettingsSubsystem.MinMasterSpeed THEN
			// Limit master speed
			SubsystemInterface.In.MasterSpeed := SettingsSubsystem.MinMasterSpeed;
		
		ELSE
			// Forward master speed
			SubsystemInterface.In.MasterSpeed := DINT_TO_INT(SubsystemBase.SCQ.Variable);
		END_IF

		F_ITC_SendSCR(
			eChannelSrc		:= meChannelSrc, 
			SubsystemName	:= F_ReduceToAlphaNumeric(SettingsSubsystem.SubsystemName), 
			Code			:= SubsystemBase.SCQ.Code, 
			Variable		:= INT_TO_DINT(SubsystemInterface.In.MasterSpeed), 
			eReturnCode		:= E_ErrorConv.NO_ERROR_CODE);

	(*******************************************************************************
		Update system time
	********************************************************************************)
	E_ITC_SubsystemControlCode.UPDATE_SYSTEM_TIME:
		// Set synchronize command
		ITC.Commands.UpdateSystemTime := TRUE;
		
		// Set time to synchronize
		SubsystemBase.TimeValue := SubsystemBase.SCQ.SystemTime;

	(*******************************************************************************
		Update all groups and positions
	********************************************************************************)
	E_ITC_SubsystemControlCode.REQUEST_GROUP_POSITION_STATUS:
		// If not already a request for a full system update is active
		IF NOT ITC.Commands.UpdateAllGroupsAndPositions THEN
			// Set command to send system update
			ITC.Commands.UpdateAllGroupsAndPositions 	:= TRUE; 
			// Store channel source
			SubsystemBase.UpdateChannelSrc := meChannelSrc;
			// Reset index
			SubsystemBase.eUpdateElementNumber := 1;
			SubsystemBase.eUpdateFunctionNumber := 1;
			SubsystemBase.eUpdateGroupNumber := 1;
		END_IF
		
ELSE
	// Unrecognised ControlRequest message received 
	DebugMsg := CONCAT('M_ITC_HandleBufferMessages - Unknown control code received: ', INT_TO_STRING(SubsystemBase.SCQ.Code));
	fbDebugMsg.M_SendErrorMsg(mMessage := DebugMsg);
END_CASE

// if request was no masterspeed cmd
IF SubsystemBase.SCQ.Code <> E_ITC_SubsystemControlCode.SET_MASTER_SPEED THEN
	F_ITC_SendSCR(
		eChannelSrc		:= meChannelSrc, 
		SubsystemName	:= F_ReduceToAlphaNumeric(SettingsSubsystem.SubsystemName), 
		Code			:= SubsystemBase.SCQ.Code, 
		Variable		:= ITC.Variable, 
		eReturnCode		:= E_ErrorConv.NO_ERROR_CODE);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ITC_SSQ" Id="{48ed7fbe-8ae7-4062-a529-6abebcce24ba}">
      <Declaration><![CDATA[METHOD PRIVATE M_ITC_SSQ : BOOL
VAR_INPUT
	meChannelSrc		: E_MFCS_CHANNEL; // Number of the source 
	mpData				: PVOID; // Data  pointer 
	mLen				: UDINT; // Data length
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Map data
F_BlockCopy(
	pSrc:= mpData, 
	LenSrc:= mLen, 
	pDest:= ADR(SubsystemBase.SSQ), 
	LenDest:= SIZEOF(SubsystemBase.SSQ));
	
F_ITC_SendSSR(
	eChannelSrc		:= meChannelSrc, 
	SubsystemName	:= F_ReduceToAlphaNumeric(SettingsSubsystem.SubsystemName), 
	eMode			:= SubsystemData.OperationState.eMode, 
	eState			:= SubsystemData.OperationState.eState, 
	eSystemInfo		:= E_SystemInfo.NO_INFO, 
	eErrorState		:= SubsystemData.ErrorData.ErrorState, 
	eErrorCode		:= SubsystemData.ErrorData.Error.ErrorCode.Conv, 
	eErrorType		:= SubsystemData.ErrorData.Error.ErrorType, 
	ErrorInformation:= SubsystemData.ErrorData.Error.ErrorParam, 
	Variable		:= ITC.Variable, 
	eReturnCode		:= E_ErrorConv.NO_ERROR_CODE);]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_MonitorSubsystemErrors" Id="{086c308c-a619-47a2-9d51-4d2765ed2001}">
      <Declaration><![CDATA[/// Subsystem error handler
METHOD M_MonitorSubsystemErrors : BOOL
(**************************************************************************************
 * Application   : BoxControl Framework
 * Revision date : $Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 * Author        : CDC
 * ------------------------------------------------------------------------------------
 * © Swisslog AG * Swisslog is not liable for any usage of this source code that is not agreed
 * on between Swisslog and the other party. The mandatory legal liability remains * unaffected.
 * ------------------------------------------------------------------------------------
 * Project revision history:
 *
 * VERSION DATE         INITIALS     DESCRIPTION
 * 0.0     DD.MM.YYYY   name       	 explain customized modifications
 *
 **************************************************************************************)
VAR
	meGroupNumber			: E_GroupNumber; // Group number
	mDataSetIdx				: INT; // Temporary data set index
	mErrorDataSet			: ST_ErrorDataSet; // Temporary error set
	mErrorData				: ST_SubsystemErrorStruct; // Temporary error data
	mGroupErrorData			: ST_GroupErrorStruct; // Group error struct
	mIdx					: INT; // Iterator
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(**************************************************************************************************************
   Subsystem error handling
***************************************************************************************************************)

// Store current data set index
mDataSetIdx := SubsystemData.ErrorData.DataSetIdx;

// Store current error data
mErrorData := SubsystemData.ErrorData;

// Check if an error is stored
IF mDataSetIdx > 0 THEN
	// If error type has changed - Gone or changed
	IF mErrorData.ErrorDataSet[mDataSetIdx].ErrorType <> mErrorData.Error.ErrorType THEN
		
		// If the stored error type was "ERROR"
		IF mErrorData.Error.ErrorType = E_ErrorType.ERROR
           OR mErrorData.Error.ErrorType = E_ErrorType.WARNING THEN
			// Send error is gone
			ITC.Commands.NoErrorReport := TRUE;
		END_IF
		
		// Reset stored data index
		SubsystemData.ErrorData.DataSetIdx := 0;		
		
		// Reset Message
		SubsystemData.ErrorData.Error.ResetError 	:= FALSE;
		SubsystemData.ErrorData.Error.ErrorType 	:= NO_ERROR_PENDING;
		SubsystemData.ErrorData.Error.ErrorCode.Conv 	:= E_ErrorConv.NO_ERROR_CODE;
		SubsystemData.ErrorData.Error.ErrorParam 	:= '';
	END_IF
// Check if an external error is stored
ELSIF SubsystemData.ErrorData.ExternalError.ErrorType > E_ErrorType.NO_ERROR_PENDING THEN
	// If error type has changed - its gone or type has changed
	IF SubsystemData.ErrorData.ExternalError.ErrorType <> 
	   SubsystemData.ErrorData.Error.ErrorType THEN
	   
		// If the stored error type was "ERROR"
		IF SubsystemData.ErrorData.Error.ErrorType = E_ErrorType.ERROR
		   OR SubsystemData.ErrorData.Error.ErrorType = E_ErrorType.WARNING THEN
			// Send error is gone
			ITC.Commands.NoErrorReport := TRUE;
		END_IF
		
		// Reset Message
		SubsystemData.ErrorData.Error.ResetError 	:= FALSE;
		SubsystemData.ErrorData.Error.ErrorType 	:= NO_ERROR_PENDING;
		SubsystemData.ErrorData.Error.ErrorCode.Conv:= E_ErrorConv.NO_ERROR_CODE;
		SubsystemData.ErrorData.Error.ErrorParam 	:= '';
	END_IF
END_IF

(**************************************************************************************************************
   Check for new or higher prioritized message
***************************************************************************************************************)
// Loop trough all errors 
FOR mIdx := 1 TO NUMBER_OF_ERROR_SETS DO
	// Detect new or higher prioritized error message
	IF mErrorData.ErrorDataSet[mIdx].ErrorType > mErrorData.Error.ErrorType THEN
		
		// Store index of current data set
		SubsystemData.ErrorData.DataSetIdx := mIdx;
		
		// Store error data set
		mErrorDataSet := SubsystemData.ErrorData.ErrorDataSet[mIdx];
		
		// Update error
		SubsystemData.ErrorData.Error.ErrorCode.Conv := mErrorDataSet.ErrorCode.Conv;
		SubsystemData.ErrorData.Error.ErrorParam := mErrorDataSet.ErrorParam;
		SubsystemData.ErrorData.Error.ErrorType := mErrorDataSet.ErrorType;
		
		// New error - send status report
		ITC.Commands.StatusReport := TRUE;
	END_IF
	
	// Check is an error is ongoing and a reset command is set
	IF mErrorData.Error.ResetError AND 
       mErrorData.ErrorDataSet[mIdx].ErrorType <> NO_ERROR_PENDING THEN
	   
		// Reset current error data set
		SubsystemData.ErrorData.ErrorDataSet[mIdx].ResetError := TRUE;
	END_IF
END_FOR


// Check external error slot
IF SubsystemData.ErrorData.ExternalError.ErrorType > SubsystemData.ErrorData.Error.ErrorType THEN

	// Reset lower prioritized previous errors
	mDataSetIdx := 0;
	
	// Update error
	SubsystemData.ErrorData.Error.ErrorCode.Conv := SubsystemData.ErrorData.ExternalError.ErrorCode.Conv;
	SubsystemData.ErrorData.Error.ErrorParam := SubsystemData.ErrorData.ExternalError.ErrorParam;
	SubsystemData.ErrorData.Error.ErrorType := SubsystemData.ErrorData.ExternalError.ErrorType;

	// Send Report
	ITC.Commands.StatusReport := TRUE;
END_IF

// Check is an external error is ongoing and a reset command is set
IF SubsystemData.ErrorData.Error.ResetError AND 
   SubsystemData.ErrorData.ExternalError.ErrorType <> NO_ERROR_PENDING THEN

	// Reset current error data set
	SubsystemData.ErrorData.ExternalError.ResetError := TRUE;
END_IF

// If reset command is set
IF mErrorData.Error.ResetError THEN
	
	// If the stored error type was "ERROR"
	IF mErrorData.Error.ErrorType = E_ErrorType.ERROR THEN
		
		// Send error is gone
		ITC.Commands.NoErrorReport := TRUE;
	END_IF
	
	// Reset stored data index
	SubsystemData.ErrorData.DataSetIdx := 0;	

	// Reset Message
	SubsystemData.ErrorData.Error.ResetError 	:= FALSE;
	SubsystemData.ErrorData.Error.ErrorType 	:= NO_ERROR_PENDING;
	SubsystemData.ErrorData.Error.ErrorCode.Conv 	:= E_ErrorConv.NO_ERROR_CODE;
	SubsystemData.ErrorData.Error.ErrorParam 	:= '';
END_IF


(**************************************************************************************************************
   Subsystem error state
***************************************************************************************************************)

// If Subsystem is in error state
IF SubsystemData.ErrorData.Error.ErrorType = E_ErrorType.ERROR THEN
	// Set error state - ERROR
	SubsystemData.ErrorData.ErrorState := E_ErrorState.ERROR;
	
// If Subsystem is in warning state
ELSIF SubsystemData.ErrorData.Error.ErrorType = E_ErrorType.WARNING THEN
	// Set error state - WARNING
	SubsystemData.ErrorData.ErrorState := E_ErrorState.WARNING;

// If Subsystem has no error or an info is pending
ELSIF SubsystemData.ErrorData.Error.ErrorType = E_ErrorType.NO_ERROR_PENDING OR 
	  SubsystemData.ErrorData.Error.ErrorType = E_ErrorType.INFO  THEN
	// Set error state - Operational
	SubsystemData.ErrorData.ErrorState := E_ErrorState.OPERATIONAL;

ELSE
	// Otherwise -> Unknown
	SubsystemData.ErrorData.ErrorState := E_ErrorState.UNKNOWN;
END_IF

(**************************************************************************************************************
   Monitor groups
***************************************************************************************************************)
// Reset
SubsystemData.ErrorData.GroupErrorPending := FALSE;

// Go through all groups
FOR meGroupNumber := E_GroupNumber.G_BEGIN_GROUP + 1 TO E_GroupNumber.G_END_GROUP - 1 DO
	
	// Get group	
	mGroupErrorData := F_GetGroupErrorData(eGroupNumber := meGroupNumber);

	// Is group is in error state or an underlaying element
	IF mGroupErrorData.Error.ErrorType = E_ErrorType.ERROR OR
	   mGroupErrorData.ElementErrorPending THEN
	   	// Set error flag
		SubsystemData.ErrorData.GroupErrorPending := TRUE;
		EXIT;
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_PreInit" Id="{5d445080-68ff-4d19-9739-3661f8eb4838}">
      <Declaration><![CDATA[METHOD M_PreInit : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/15_Subsystem/10_Lib/10_Conv/FB_SubsystemConv.TcPOU $
 *
 *	Purpose			:	Preinitialize 
 *						Clears values and load settings
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(**************************************************************************************
	Reset initialization sequence values
***************************************************************************************)
SubsystemBase.eLimitFunctionNumber := E_FunctionNumber.F_BEGIN_FUNCTION;
SubsystemBase.eLimitElementNumber := E_ElementNumber.E_BEGIN_ELEMENT;
SubsystemBase.eLimitGroupNumber := E_GroupNumber.G_BEGIN_GROUP;

(**************************************************************************************
	Load configuration
***************************************************************************************)
SettingsSubsystem := ConfigSubsystem;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ResetError" Id="{00be9992-b6f8-4581-993e-242cae3b9d9b}">
      <Declaration><![CDATA[METHOD M_ResetError : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/15_Subsystem/10_Lib/10_Conv/FB_SubsystemConv.TcPOU $
 *
 *	Purpose			:	Reset Subsystem errors.
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)

]]></Declaration>
      <Implementation>
        <ST><![CDATA[// If the Subsystem is in error
IF SubsystemData.ErrorData.Error.ErrorType  <> E_ErrorType.NO_ERROR_PENDING  THEN
	// Send reset
	SubsystemData.ErrorData.Error.ResetError := TRUE;
END_IF

M_ResetError := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ResetExternalError" Id="{972cd5a4-6940-4a5a-8b19-69a6bbfd70ed}">
      <Declaration><![CDATA[METHOD M_ResetExternalError : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/15_Subsystem/10_Lib/10_Conv/FB_SubsystemConv.TcPOU $
 *
 *	Purpose			:	Reset external error
 *						
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
 VAR_INPUT
	mReset		: BOOL; // Force reset
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Initialize
M_ResetExternalError := FALSE;

// Reset error if ResetError command or reset command is set 
IF SubsystemData.ErrorData.ExternalError.ResetError OR mReset THEN
	// Clear error
	SubsystemData.ErrorData.ExternalError.ResetError 		:= FALSE; 
	SubsystemData.ErrorData.ExternalError.ErrorType 		:= NO_ERROR_PENDING;
	SubsystemData.ErrorData.ExternalError.ErrorCode.Conv	:= E_ErrorConv.NO_ERROR_CODE;
	SubsystemData.ErrorData.ExternalError.ErrorParam 		:= '';
	M_ResetExternalError 								:= TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetExternalError" Id="{08d127a5-7a6d-4cde-a6c0-b0dd56e46acb}">
      <Declaration><![CDATA[METHOD M_SetExternalError : BOOL
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/15_Subsystem/10_Lib/10_Conv/FB_SubsystemConv.TcPOU $
 *
 *	Purpose			:	Set error
 *						Wrapped to a function to improve debugging and readability.
 *						
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
 VAR_INPUT
	mErrorType		: E_ErrorType; // Error message type
	mErrorParam		: STRING(System.ERROR_PARAM_STRINGLENGTH); // Error parameter
	mErrorCode		: INT; // Error message
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Initialize
M_SetExternalError := FALSE;

// Check that the values are valid
IF mErrorType > E_ErrorType.NO_ERROR_PENDING AND mErrorCode > E_ErrorConv.NO_ERROR_CODE THEN

	SubsystemData.ErrorData.ExternalError.ErrorCode.Conv := mErrorCode;
	SubsystemData.ErrorData.ExternalError.ErrorType := mErrorType;
	SubsystemData.ErrorData.ExternalError.ErrorParam := mErrorParam;

	M_SetExternalError := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_UpdateRegistry" Id="{c4f151ae-d6c2-480b-8258-ed804230b9ae}">
      <Declaration><![CDATA[METHOD M_UpdateRegistry
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 404529 $
 *	Revision date	:	$Date: 2020-11-19 15:59:09 +0100 (tor, 19 nov 2020) $
 *	Last changed by	:	$Author: b7bolm $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/trunk/01_Software/BCF/BCF/JumpStart/20_Product/10_App/15_Subsystem/10_Lib/10_Conv/FB_SubsystemConv.TcPOU $
 *
 *	Purpose			:	Update registry information
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
VAR_INPUT
END_VAR
VAR
	mIdx	: INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
SubsystemRegistry.rSubsystemData REF= SubsystemData;
SubsystemRegistry.rSubsystemInterface REF= SubsystemInterface;
SubsystemRegistry.rSettingsSubsystem REF= SettingsSubsystem;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SubsystemConv">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SubsystemConv.M_InitControl">
      <LineId Id="3" Count="53" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SubsystemConv.M_InitSubsystem">
      <LineId Id="3" Count="21" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SubsystemConv.M_ITC_ProcessMsg">
      <LineId Id="3" Count="33" />
      <LineId Id="72" Count="0" />
      <LineId Id="74" Count="4" />
      <LineId Id="73" Count="0" />
      <LineId Id="37" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SubsystemConv.M_ITC_ProcessOut">
      <LineId Id="3" Count="251" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SubsystemConv.M_ITC_SCQ">
      <LineId Id="3" Count="96" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SubsystemConv.M_ITC_SSQ">
      <LineId Id="3" Count="17" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SubsystemConv.M_MonitorSubsystemErrors">
      <LineId Id="227" Count="172" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SubsystemConv.M_PreInit">
      <LineId Id="3" Count="9" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SubsystemConv.M_ResetError">
      <LineId Id="3" Count="5" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SubsystemConv.M_ResetExternalError">
      <LineId Id="3" Count="11" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SubsystemConv.M_SetExternalError">
      <LineId Id="3" Count="10" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SubsystemConv.M_UpdateRegistry">
      <LineId Id="3" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_EncoderEx" Id="{e4209a31-8267-4106-8261-e22c7cc3b5af}" SpecialFunc="None">
    <Declaration><![CDATA[/// Generates a synthetic encoder signal
// Remark: Can handle forward and reverese
FUNCTION_BLOCK FB_EncoderEx
(**************************************************************************************
 * 	Application		:	BoxControl Framework
 *	Revision		:	$Revision: 352787 $
 *	Revision date	:	$Date: 2015-07-23 08:18:11 +0200 (Do, 23 Jul 2015) $
 *	Last changed by	:	$Author: d7mangc $
 *	URL				:	$URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/20_Release/tags/R0.5.7/01_Software/BoxControlFramework/BoxControlFramework/JumpStart/11_Library/11Emulation/12_ElementFunctions/10_Functions/FB_TransportControlEmulation.TcPOU $
 *
 *	Purpose			:	Encoder 
 *
 * ------------------------------------------------------------------------------------
 *	Copyright Swisslog [IP AG], Switzerland. All rights reserved.
 * 
 * ------------------------------------------------------------------------------------
 *	
 * 	Revision History: 
 *
 * 	VERSION			DATE			INITIALS			DESCRIPTION
 *	0.1				01.01.2001		swl					Example
 *
 **************************************************************************************)
VAR_INPUT
	Run 			: BOOL; // Run command
	Speed 			: INT; // Speed [mm/s] + = Forward, - = Reverse
	RateIncPerMM 	: REAL := 1; // Encoder Resolution [Inc/mm]
	MaxEncoderValue	: UDINT; (* Max Encoder value
								Range = 0..MaxEncoderValue
							 *)
END_VAR
VAR_OUTPUT
	EncoderValue 	: UDINT; // Encoder value [Inc]
END_VAR
VAR
	Inc 			: DINT;
	IncLReal		: LREAL;
	Rest			: LREAL;
	EncoderValueDINT: DINT; // Encoder value [Inc]
	LastRest		: LREAL;
	LastSpeed   	: INT;
	t				: REAL;
	a				: REAL;
	StartCycl		: BOOL;
	fbGetCurTaskIdx : GETCURTASKINDEX;
	CycleTime       : UDINT;		
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Get current cycle time
fbGetCurTaskIdx();
CycleTime := _TaskInfo[fbGetCurTaskIdx.index].CycleTime;

// Calculate increment based on speed and resolution
IF Run THEN
	// t [s]
	t := (UDINT_TO_REAL(CycleTime) / 10000000.0);

	// Wait start cycle 
	IF StartCycl THEN
		// a = v - v0 / t [mm/s^2]
		a := (INT_TO_REAL(Speed - LastSpeed)) / t;	
	
		// Build result
		IncLReal := RateIncPerMM * (LastSpeed * t + 0.5 * a * EXPT(t,2));
		
		// Build rest *.x
		Rest := LMOD(IncLReal, 1) + LastRest;
		
		// Add trunc of rest
		IncLReal := IncLReal + LTRUNC(Rest);
		
		// Store last rest
		LastRest := LMOD(Rest, 1);
		
		// Incs s = v0 * t + 1/2 * a * t^2 [mm/s]
		// Remark: LTRUNG is used again to ensure the same rounding behavior
		Inc := LREAL_TO_DINT(LTRUNC(IncLReal));

		// Update last speed	
		LastSpeed := Speed;
	END_IF

	// Set start cycle done
	StartCycl := TRUE;
ELSE
	// Reset values
	StartCycl := FALSE;
	LastSpeed := 0;
	LastRest := 0;
	Inc := 0;
END_IF

// Update encoder value
EncoderValueDINT := EncoderValueDINT + Inc;

IF EncoderValueDINT > UDINT_TO_DINT(MaxEncoderValue) THEN
	EncoderValueDINT := EncoderValueDINT - (UDINT_TO_DINT(MaxEncoderValue) + 1); 
	
ELSIF EncoderValueDINT < 0 THEN
	EncoderValueDINT := UDINT_TO_DINT(MaxEncoderValue) + EncoderValueDint + 1;
END_IF

EncoderValue := DINT_TO_UDINT(EncoderValueDINT);
]]></ST>
    </Implementation>
    <ObjectProperties>
      <XmlArchive>
        <Data>
          <o xml:space="preserve" t="UMLStereoTypeContainerObject">
            <v n="IsType" t="UMLType">BaseArea</v>
            <v n="Stereotype">""</v>
            <d n="Stereotypes" t="Hashtable" />
          </o>
        </Data>
        <TypeList>
          <Type n="Hashtable">System.Collections.Hashtable</Type>
          <Type n="String">System.String</Type>
          <Type n="UMLStereoTypeContainerObject">{30250973-b110-4e31-b562-c102e042dca4}</Type>
          <Type n="UMLType">{0197b136-405a-42ee-bb27-fd08b621d0cf}</Type>
        </TypeList>
      </XmlArchive>
    </ObjectProperties>
    <LineIds Name="FB_EncoderEx">
      <LineId Id="3" Count="2" />
      <LineId Id="9" Count="51" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>
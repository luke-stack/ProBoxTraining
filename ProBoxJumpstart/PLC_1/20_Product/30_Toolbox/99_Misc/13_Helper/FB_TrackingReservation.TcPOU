<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_TrackingReservation" Id="{b5a46420-a8c0-40c8-a792-6ee9f5753ca9}" SpecialFunc="None">
    <Declaration><![CDATA[/// This function block automatically reserves a zone on the window tracking.
/// Remark: Only one zone at the time
FUNCTION_BLOCK FB_TrackingReservation IMPLEMENTS I_TrackingActionListener
(************************************************************************************** 
* 	Application 		: BoxControl Framework 
* 	Revision 			: $Revision: 408723 $ 
* 	Revision date 		: $Date: 2018-06-27 13:49:08 +0200 (Wed, 27 Jun 2018) $ 
* 	Last changed by 	: $Author: b7bolm $ 
* 	URL 				: $URL: http://almscdc.swisslog.com/repo/SWPD/Development/BoxControlFramework/21_Projects/BCF_2.0/trunk/BCF/BCF/JumpStart/20_Product/10_App/12_E_Functions/10_Lib/10_Conv/FB_FunctionList.TcPOU $ 
* ------------------------------------------------------------------------------------ 
* 	© Swisslog AG 
* 	Swisslog is not liable for any usage of this source code that is not agreed 
* 	on between Swisslog and the other party. The mandatory legal liability remains 
* 	unaffected. 
* ------------------------------------------------------------------------------------ 
* 	Revision History: 
* 
* 	VERSION 		DATE 			INITIALS 			DESCRIPTION 
* 	0.1 			25.09.2018 		mbo					First implementation
* 
**************************************************************************************)
VAR_INPUT
	Enable					: BOOL; // Enable reservation
	ActionId				: INT; // Action id for zone
	AbsolutePosition		: DINT; // Position where it should be earliest reserved
	Length					: UINT; // length of tracking zone to be reserved
	MaxDistance				: UDINT; // Max distance in which its allowed to be reserved (0=Full range)
	PositionToLive			: UDINT; // Position after the reserved zones gets deleted if not used
	MinimumDistance			: UINT; // Minimum gap until next reservation [mm]
	iWindowTracking			: I_WindowTracking; // Link to window tracking
END_VAR
VAR_OUTPUT
	ReservedZoneIndex		: UINT; // Currently reserved zone index
END_VAR
VAR
	LastReservedZoneIndex	: UINT; // Last reserved zone index
	LastZoneEndPosition		: UDINT; // Last zone end position
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Check inputs
IF iWindowTracking = 0 OR 
   ActionId = 0 OR
   Length = 0 THEN
	RETURN;
END_IF

// Reserve a new zone if required
IF Enable THEN
	
	IF ReservedZoneIndex = 0 THEN
		LastZoneEndPosition := iWindowTracking.M_GetZoneEndPosition(LastReservedZoneIndex);
		
		IF AbsolutePosition + MinimumDistance < UDINT_TO_DINT(LastZoneEndPosition) OR LastZoneEndPosition = 0 THEN
			ReservedZoneIndex := iWindowTracking.M_AllocateNextFreeZone(
													mActionId 			:= ActionId,
													mAbsolutePosition 	:= DINT_TO_UDINT(AbsolutePosition),
													mLength 			:= Length,
													mMaxDistance 		:= MaxDistance,
													miActionListener 	:= THIS^,
													mPositionToLive 	:= PositionToLive);
		END_IF
	END_IF
END_IF
]]></ST>
    </Implementation>
    <Method Name="M_ActionZoneChangedEvent" Id="{bd2b7e33-f7f2-405a-bf6b-41c98eabec56}">
      <Declaration><![CDATA[METHOD M_ActionZoneChangedEvent

VAR_INPUT
	mZoneIndex	: UINT; // Deleted zone index
	mZoneData	: ST_WindowTrackingZone; // Data of deleted zone
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Reset when zone gets occupied
IF mZoneData.TU_Present THEN
	LastReservedZoneIndex := ReservedZoneIndex;
	ReservedZoneIndex := 0;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ActionZoneDeletedEvent" Id="{9cf3b968-c336-4366-8029-89466eff2a62}">
      <Declaration><![CDATA[// Automatically called whenever the stored zone gets deleted on tracking
METHOD M_ActionZoneDeletedEvent
VAR_INPUT
	mZoneIndex	: UINT; //  Deleted zone index
	mZoneData	: ST_WindowTrackingZone; // Data of deleted zone
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF mZoneIndex = ReservedZoneIndex THEN
	ReservedZoneIndex := 0;
	
ELSIF mZoneIndex = LastReservedZoneIndex THEN
	LastReservedZoneIndex := 0;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_ClearReservation" Id="{1a3299c6-0a4f-4353-a77a-7e9c6d964951}">
      <Declaration><![CDATA[/// Delete pending reservation
METHOD M_ClearReservation : BOOL // Returns true if successfully deleted
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[M_ClearReservation := FALSE;

IF iWindowTracking <> 0 THEN
	IF ReservedZoneIndex > 0 THEN
		M_ClearReservation := iWindowTracking.M_DeleteZone(ReservedZoneIndex);
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_TrackingReservation">
      <LineId Id="95" Count="23" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_TrackingReservation.M_ActionZoneChangedEvent">
      <LineId Id="26" Count="3" />
      <LineId Id="10" Count="0" />
      <LineId Id="20" Count="0" />
    </LineIds>
    <LineIds Name="FB_TrackingReservation.M_ActionZoneDeletedEvent">
      <LineId Id="20" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="FB_TrackingReservation.M_ClearReservation">
      <LineId Id="10" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>